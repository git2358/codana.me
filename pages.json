{"entries":[{"title":"Thanks!","url":"/contact/thankyou/","tags":[],"body":"Thanks for contacting me. I'll check my inbox right...about...now-ish and get back to you."},{"title":"Contact Me","url":"/contact/","tags":[],"body":"Got a question, comment, or suggestion for the bits that come together to make Codana.me? A form awaits you. What's Required Name Email Message What's Optional, If You're Feeling Whimsical Favorite Chord? Favorite Scale? Contact Me"},{"title":"Projects","url":"/projects/","tags":[],"body":"My main public projects. projects(audio) bandcamp - full albums soundcloud - one offs/random ideas projects(code) various self-made games - all my self-made games, an ongoing portfolio unix/mac/win (ruby) gem warrior - text adventure as a RubyGem feep - use Ruby to make your computer beep, but musically matrext - use Ruby to make text phrases look like they're being decoded, Matrix-style os x utterly - speech synth GUI standing desk app - schedule sitting and standing events for a standing desk (or not!) my mac amp - because I wanted a simple audio player windows audio hash - combine random chunks of wav files into one web - omnisite codana.me - source for this site raffler - and the winner is... chipliketuna - css animations are a thing, yanno ...and even more random webapp fun"},{"title":"Résumé","url":"/resume/","tags":[],"body":"Work History Scripps Institution of Oceanography (sio.ucsd.edu) La Jolla, CA Programmer/Analyst May 2016 – Present Work with web team to create, administer, and develop for custom web applications UC San Diego Health System (health.ucsd.edu) San Diego, CA Programmer/Analyst (Web Services) May 2011 – May 2016 Work with team to create, administer and develop for custom SharePoint web applications Administer and support a mix of public and private SharePoint sites, ranging from SharePoint 2007 to 2013, and a handful of Classic ASP and other miscellaneous web applications Administer and support large internal SharePoint 2013 web application used by thousands of employees Create and maintain several custom SharePoint web parts using C# in Visual Studio Provide tech support for 30+ web/db/index Windows 2003/2008 servers Provide tech support for 5000+ user workstations Lead SharePoint site admin training classes Create and maintain several custom Powershell scripts (and modules) for server administration Programmer/Analyst (Facilities and Hospitality Services via UCSD Temp Services) Jul. 2010 – May 2011 Responsible for front-end design and back-end programming for internal facilities website Created website in Windows SharePoint Services 3.0 Added web/server controls customized using C# Created front-end interface in XHTML 1.1 and CSS 2.1, as well as client-side interaction using various jQuery plugins and custom scripts Responsible for front-end design for catering website Modified website in ASP.NET Customized front-end interface in XHTML 1.1 and CSS 2.1, as well as client-side interaction using various jQuery plugins and custom scripts Programmer/Analyst (Information and Telecommunications Services via UCSD Temp Services) Jul. 2009 – Jul. 2010 Responsible for front-end design and back-end programming for internal telecommunications website Created website in Visual Studio 2008 Added web/server controls customized using C#, including web form with file upload Created front-end interface in XHTML 1.1 and CSS 2.1, as well as client-side interaction using various jQuery plugins and custom scripts Responsible for front-end design and back-end programming mockup of web paging system Created web application in Visual Studio 2008 Created front-end interface in XHTML 1.1 and CSS 2.1, as well as client-side interaction using various jQuery plugins and custom scripts Responsible for SharePoint mockup of internal telecommunications website Customization of web-based database system (XHTML, CSS, Javascript, Classic ASP) e-Selex.com (e-Selex.com) Nov. 14, 2005 – Jul. 24, 2009 San Diego, CA Systems Technician Perform skilled repair and maintenance of all technology-related equipment Maintain several Windows- and Unix-based servers in-house and at datacenter Provide technical support to users on equipment setup/operation/troubleshooting Purchase and setup hardware/software when needed Manage RAID and tape backups Create marketing/sales materials for both print and web Created/maintained Windows 2003 Active Directory domain Implemented RSA SecureID on LAN, workstations; hard drive-level encryption on laptops Web Developer Primary: http://www.e-selex.com (all aspects) Secondary: http://www.smartselex.com (design) Tertiary: secure file transfer, marketing/demo, various other web applets Snapp & Associates Insurance Services, Inc. (snappins.com) Apr. 26, 2004 – Nov. 11, 2005 San Diego, CA Assistant to the IT Director Performed skilled repair and maintenance of all technology-related equipment Provided technical support to users on equipment setup/operation/troubleshooting Monitored, administered ~30-user LAN, satellite office with multiple remote users Jan. 2003 – Apr. 26, 2004 San Diego, CA Production Assistant Worked with producers to create effective management solutions for leads and sales Administered Commence RM relational database Created website, brochures, and other marketing materials University of California, San Diego Dept. of Alumni Relations (alumni.ucsd.edu) Jan. 2000 – Aug. 2002 San Diego, CA Webmaster Maintained and created new material for website: http://alumni.ucsd.edu Developed print and web-based informational materials Collaborated with co-workers on projects and website maintenance Education University of California, San Diego (ucsd.edu) Sep. 1999 – Jun. 2003 San Diego, CA Degree: BA in Interdisciplinary Computing in the Arts (ICAM – Emphasis in Music and Music Technology) The ICAM program aims to create the next generation of artists in a world of increasing connectivity in art, music and technology. Cognitive Science minor - Study of the brain, behavior, and computation, fitting in with the ICAM program by rounding out artistic and technological merits with a basis in scientific study and research. Technical Skills Development Technologies (Primary) PHP (Drupal, WP) (X)HTML(5), CSS(3) Javascript C# Ruby Objective-C/Swift Powershell Development Technologies (Other) Shell scripting Rust Go Development IDEs Atom Visual Studio Notepad++ TextMate Xcode Web Server Software Apache (XAMPP/MAMP/LAMP) IIS Jekyll Mongoose Database Systems MySQL MariaDB Microsoft SQL Server SQLite Content Management Systems cPanel SharePoint Wordpress Versioning Systems Git Team Foundation Server Visual Sourcesafe RCS Mercurial SVN Project Management Atlassian (Jira/Confluence) Zendesk Microsoft Project Image Manipulation Adobe Photoshop Paint.NET Operating Systems Apple OS X and iOS Linux/Unix Microsoft Windows Personal Development/Blogging http://codana.me - code blogging http://github.com/michaelchadwick - open-source projects http://puppybongos.wordpress.com - home of Standing Desk App I'm also a Musician | IT Specialist"},{"title":"Posts by Tags","url":"/tags/","tags":true,"body":"Find a post by tag. webdev 2015-01-22 - Playing with Javascript and the Web Audio API 2015-01-07 - Some Fun New Web Projects to Kick Off 2015 2014-06-16 - Excluding Pages from Top Navigation in Jekyll 2014-06-09 - Codana.me is my new dev blog 2012-12-03 - Dumeh, Musically 2012-09-19 - Programming! 2011-06-24 - My First Project in Ruby on Rails 2011-02-04 - Sharing is the Point 2011-01-28 - Lessons Remembered from Bad Code 2011-01-26 - I'm on Github! 2011-01-18 - Learning to Git it Right 2011-01-11 - The Man Cave Jam Mini-Site 2011-01-06 - Road to Ruby, The (Real) Beginning 2011-01-04 - More Blog Posts About More Things Need To Need To Be Made 2010-10-27 - The Judgement of Google 2010-10-16 - WkHTMLtoPDF, or Why I Hate Building From Source 2010-10-12 - Coding the Night Away configuration 2010-10-12 - Coding the Night Away cakephp 2010-10-16 - WkHTMLtoPDF, or Why I Hate Building From Source coding 2014-05-19 - New coding project: Utter 2014-03-10 - IGDA Meetup 2010-10-16 - WkHTMLtoPDF, or Why I Hate Building From Source wkhtmltopdf 2010-10-16 - WkHTMLtoPDF, or Why I Hate Building From Source rant 2011-01-28 - Lessons Remembered from Bad Code 2010-10-16 - WkHTMLtoPDF, or Why I Hate Building From Source pdf 2010-10-16 - WkHTMLtoPDF, or Why I Hate Building From Source shell 2014-11-23 - Sending Gmail from OS X Yosemite Terminal 2014-07-08 - Commanding the Line 2010-10-16 - WkHTMLtoPDF, or Why I Hate Building From Source cli 2015-05-06 - Don't Beep When You Can Feep 2010-10-16 - WkHTMLtoPDF, or Why I Hate Building From Source source 2010-10-16 - WkHTMLtoPDF, or Why I Hate Building From Source anxiety 2010-10-27 - The Judgement of Google judgement 2010-10-27 - The Judgement of Google bug-reporting 2010-10-27 - The Judgement of Google technology 2011-01-12 - Redmine Upgrade Woes (With a Happy Ending) 2010-12-02 - Just One Password Needed 1password 2010-12-02 - Just One Password Needed security 2010-12-02 - Just One Password Needed iphone 2011-01-04 - More Blog Posts About More Things Need To Need To Be Made ios 2014-06-19 - Adventures in Spritekit 2012-09-19 - Programming! 2011-01-04 - More Blog Posts About More Things Need To Need To Be Made morethingsneed.to 2011-01-04 - More Blog Posts About More Things Need To Need To Be Made mtnt 2011-01-04 - More Blog Posts About More Things Need To Need To Be Made rails 2013-03-13 - Railsbridge San Diego 2012-09-19 - Programming! 2011-06-24 - My First Project in Ruby on Rails 2011-01-12 - Redmine Upgrade Woes (With a Happy Ending) 2011-01-04 - More Blog Posts About More Things Need To Need To Be Made ruby 2015-10-01 - Gem Warrior: Part 3 (of 3): Gemcutting 101 2015-07-16 - Gem Warrior: Part 2 (of Some Indeterminate Number) 2015-06-08 - Gem Warrior: Part 1 (of Who Knows) 2015-05-06 - Don't Beep When You Can Feep 2014-06-26 - Playing with Ruby Audio 2014-06-01 - New coding interest (for now): Lita handlers 2013-03-13 - Railsbridge San Diego 2012-09-19 - Programming! 2011-06-24 - My First Project in Ruby on Rails 2011-01-12 - Redmine Upgrade Woes (With a Happy Ending) 2011-01-06 - Road to Ruby, The (Real) Beginning 2011-01-04 - More Blog Posts About More Things Need To Need To Be Made meetup 2014-03-10 - IGDA Meetup 2011-01-06 - Road to Ruby, The (Real) Beginning 1140 2011-01-11 - The Man Cave Jam Mini-Site music 2012-12-03 - Dumeh, Musically 2012-10-11 - VexFlow TabDiv - Easy Musical Staves Via Code 2011-01-11 - The Man Cave Jam Mini-Site grid-system 2011-01-11 - The Man Cave Jam Mini-Site mcj 2011-01-11 - The Man Cave Jam Mini-Site redmine 2011-01-12 - Redmine Upgrade Woes (With a Happy Ending) debugging 2011-01-12 - Redmine Upgrade Woes (With a Happy Ending) upgrading 2011-01-12 - Redmine Upgrade Woes (With a Happy Ending) git 2013-03-13 - Railsbridge San Diego 2011-06-24 - My First Project in Ruby on Rails 2011-01-18 - Learning to Git it Right tutorials 2011-01-18 - Learning to Git it Right github 2016-12-21 - Utter is now Utterly 2016-12-06 - Axeracer, my first Pico-8 game 2016-11-07 - Game Development with Pico-8 2014-05-19 - New coding project: Utter 2011-01-26 - I'm on Github! jquery-newslist 2011-01-26 - I'm on Github! jquery 2015-01-07 - Some Fun New Web Projects to Kick Off 2015 2012-09-19 - Programming! 2011-01-26 - I'm on Github! javascript 2017-08-14 - Raffler FTW 2017-04-20 - \"Fun\" with Javascript Frameworks 2015-01-22 - Playing with Javascript and the Web Audio API 2015-01-07 - Some Fun New Web Projects to Kick Off 2015 2012-10-11 - VexFlow TabDiv - Easy Musical Staves Via Code 2012-09-19 - Programming! 2011-01-26 - I'm on Github! sharepoint 2011-02-04 - Sharing is the Point announcement 2012-09-19 - Programming! 2011-06-24 - My First Project in Ruby on Rails pureyellow.net 2011-06-24 - My First Project in Ruby on Rails c# 2011-10-25 - I Don't Say Anything to C# Regions, Actually, Because They're Inanimate Constructs csharp 2011-10-25 - I Don't Say Anything to C# Regions, Actually, Because They're Inanimate Constructs visual-studio 2011-10-25 - I Don't Say Anything to C# Regions, Actually, Because They're Inanimate Constructs actionscript 2012-09-19 - Programming! codaname 2012-09-19 - Programming! design 2012-09-19 - Programming! django 2012-09-19 - Programming! html 2012-09-19 - Programming! nebyoolae.com 2012-09-19 - Programming! python 2012-09-19 - Programming! adobe 2012-09-19 - Programming! air 2012-09-19 - Programming! chrome 2012-09-19 - Programming! css 2012-09-19 - Programming! database 2012-09-19 - Programming! flash 2012-09-19 - Programming! website 2012-09-19 - Programming! tabdiv 2012-10-11 - VexFlow TabDiv - Easy Musical Staves Via Code vexflow 2012-10-11 - VexFlow TabDiv - Easy Musical Staves Via Code vextab 2012-12-03 - Dumeh, Musically 2012-10-11 - VexFlow TabDiv - Easy Musical Staves Via Code dumeh 2012-12-03 - Dumeh, Musically sql 2013-03-13 - Railsbridge San Diego railsbridge 2013-03-13 - Railsbridge San Diego volunteering 2013-03-13 - Railsbridge San Diego women 2013-03-13 - Railsbridge San Diego apple 2016-12-21 - Utter is now Utterly 2013-05-23 - Installing Windows on Your Mac When You Have No Internal Optical Drive osx 2014-11-23 - Sending Gmail from OS X Yosemite Terminal 2014-07-08 - Commanding the Line 2014-06-15 - My Favorite Mac Apps 2014-05-19 - New coding project: Utter 2013-05-23 - Installing Windows on Your Mac When You Have No Internal Optical Drive bootcamp 2013-05-23 - Installing Windows on Your Mac When You Have No Internal Optical Drive how-to 2013-05-23 - Installing Windows on Your Mac When You Have No Internal Optical Drive install 2013-05-23 - Installing Windows on Your Mac When You Have No Internal Optical Drive windows 2015-02-03 - Audio Manipulation with NAudio on Windows 2014-07-08 - Commanding the Line 2014-06-12 - My Favorite Windows Apps 2013-05-23 - Installing Windows on Your Mac When You Have No Internal Optical Drive windows-7 2014-06-12 - My Favorite Windows Apps 2013-05-23 - Installing Windows on Your Mac When You Have No Internal Optical Drive audio 2015-10-01 - Gem Warrior: Part 3 (of 3): Gemcutting 101 2015-05-06 - Don't Beep When You Can Feep 2015-02-03 - Audio Manipulation with NAudio on Windows 2015-01-22 - Playing with Javascript and the Web Audio API 2014-06-26 - Playing with Ruby Audio 2013-09-25 - Logic Pro X: A Cursory Review logic 2013-09-25 - Logic Pro X: A Cursory Review logicprox 2013-09-25 - Logic Pro X: A Cursory Review review 2013-12-02 - Oculus Rift 2013-09-25 - Logic Pro X: A Cursory Review demo 2013-12-02 - Oculus Rift gaming 2016-12-06 - Axeracer, my first Pico-8 game 2016-11-07 - Game Development with Pico-8 2015-10-01 - Gem Warrior: Part 3 (of 3): Gemcutting 101 2015-07-16 - Gem Warrior: Part 2 (of Some Indeterminate Number) 2015-06-08 - Gem Warrior: Part 1 (of Who Knows) 2014-03-10 - IGDA Meetup 2013-12-02 - Oculus Rift oculus 2013-12-02 - Oculus Rift rift 2013-12-02 - Oculus Rift development 2014-03-10 - IGDA Meetup gamejam 2014-03-10 - IGDA Meetup miscellaneous 2014-05-19 - New coding project: Utter 2014-03-10 - IGDA Meetup barcade 2014-03-10 - IGDA Meetup igda 2014-03-10 - IGDA Meetup social 2014-03-10 - IGDA Meetup mac 2016-12-21 - Utter is now Utterly 2014-06-19 - Adventures in Spritekit 2014-06-15 - My Favorite Mac Apps 2014-05-19 - New coding project: Utter objective-c 2016-12-21 - Utter is now Utterly 2014-05-19 - New coding project: Utter lita 2014-06-01 - New coding interest (for now): Lita handlers plugin 2014-06-01 - New coding interest (for now): Lita handlers handler 2014-06-01 - New coding interest (for now): Lita handlers jekyll 2014-06-16 - Excluding Pages from Top Navigation in Jekyll 2014-06-09 - Codana.me is my new dev blog update 2014-06-09 - Codana.me is my new dev blog apps 2014-06-15 - My Favorite Mac Apps 2014-06-12 - My Favorite Windows Apps faves 2014-06-15 - My Favorite Mac Apps 2014-06-12 - My Favorite Windows Apps list 2014-06-15 - My Favorite Mac Apps 2014-06-12 - My Favorite Windows Apps utilities 2014-06-15 - My Favorite Mac Apps 2014-06-12 - My Favorite Windows Apps mavericks 2014-06-15 - My Favorite Mac Apps customization 2014-06-16 - Excluding Pages from Top Navigation in Jekyll navigation 2014-06-16 - Excluding Pages from Top Navigation in Jekyll layout 2014-06-16 - Excluding Pages from Top Navigation in Jekyll game 2016-12-06 - Axeracer, my first Pico-8 game 2016-11-07 - Game Development with Pico-8 2015-10-01 - Gem Warrior: Part 3 (of 3): Gemcutting 101 2015-07-16 - Gem Warrior: Part 2 (of Some Indeterminate Number) 2015-06-08 - Gem Warrior: Part 1 (of Who Knows) 2014-06-19 - Adventures in Spritekit spritekit 2014-06-19 - Adventures in Spritekit ruby-audio 2014-06-26 - Playing with Ruby Audio cmd 2014-07-08 - Commanding the Line command 2014-07-08 - Commanding the Line bash 2014-11-23 - Sending Gmail from OS X Yosemite Terminal 2014-07-08 - Commanding the Line prompt 2014-07-08 - Commanding the Line web 2014-11-23 - Sending Gmail from OS X Yosemite Terminal email 2014-11-23 - Sending Gmail from OS X Yosemite Terminal gmail 2014-11-23 - Sending Gmail from OS X Yosemite Terminal yosemite 2014-11-23 - Sending Gmail from OS X Yosemite Terminal terminal 2014-11-23 - Sending Gmail from OS X Yosemite Terminal scp 2014-11-23 - Sending Gmail from OS X Yosemite Terminal mail 2014-11-23 - Sending Gmail from OS X Yosemite Terminal html5 2015-01-22 - Playing with Javascript and the Web Audio API 2015-01-07 - Some Fun New Web Projects to Kick Off 2015 localstorage 2015-01-07 - Some Fun New Web Projects to Kick Off 2015 json 2015-01-07 - Some Fun New Web Projects to Kick Off 2015 audiohash 2015-02-03 - Audio Manipulation with NAudio on Windows 2015-01-22 - Playing with Javascript and the Web Audio API windows7 2015-02-03 - Audio Manipulation with NAudio on Windows naudio 2015-02-03 - Audio Manipulation with NAudio on Windows application 2015-02-03 - Audio Manipulation with NAudio on Windows wav 2015-05-06 - Don't Beep When You Can Feep 2015-02-03 - Audio Manipulation with NAudio on Windows beep 2015-05-06 - Don't Beep When You Can Feep feep 2015-05-06 - Don't Beep When You Can Feep wavfile 2015-05-06 - Don't Beep When You Can Feep text 2015-10-01 - Gem Warrior: Part 3 (of 3): Gemcutting 101 2015-07-16 - Gem Warrior: Part 2 (of Some Indeterminate Number) 2015-06-08 - Gem Warrior: Part 1 (of Who Knows) adventure 2015-10-01 - Gem Warrior: Part 3 (of 3): Gemcutting 101 2015-07-16 - Gem Warrior: Part 2 (of Some Indeterminate Number) 2015-06-08 - Gem Warrior: Part 1 (of Who Knows) gemwarrior 2015-10-01 - Gem Warrior: Part 3 (of 3): Gemcutting 101 2015-07-16 - Gem Warrior: Part 2 (of Some Indeterminate Number) 2015-06-08 - Gem Warrior: Part 1 (of Who Knows) gem 2015-10-01 - Gem Warrior: Part 3 (of 3): Gemcutting 101 2015-07-16 - Gem Warrior: Part 2 (of Some Indeterminate Number) 2015-06-08 - Gem Warrior: Part 1 (of Who Knows) guide 2015-10-01 - Gem Warrior: Part 3 (of 3): Gemcutting 101 markov 2015-10-01 - Gem Warrior: Part 3 (of 3): Gemcutting 101 yaml 2015-10-01 - Gem Warrior: Part 3 (of 3): Gemcutting 101 2015-10-01 - Gem Warrior: Part 3 (of 3): Gemcutting 101 wrapup 2015-10-01 - Gem Warrior: Part 3 (of 3): Gemcutting 101 lua 2016-12-06 - Axeracer, my first Pico-8 game 2016-11-07 - Game Development with Pico-8 pico8 2016-12-06 - Axeracer, my first Pico-8 game 2016-11-07 - Game Development with Pico-8 learning 2016-12-06 - Axeracer, my first Pico-8 game 2016-11-07 - Game Development with Pico-8 axeracer 2016-12-06 - Axeracer, my first Pico-8 game utter 2016-12-21 - Utter is now Utterly utterly 2016-12-21 - Utter is now Utterly macos 2016-12-21 - Utter is now Utterly swift 2016-12-21 - Utter is now Utterly cow 2016-12-21 - Utter is now Utterly js 2017-08-14 - Raffler FTW 2017-04-20 - \"Fun\" with Javascript Frameworks angular 2017-04-20 - \"Fun\" with Javascript Frameworks angularjs 2017-04-20 - \"Fun\" with Javascript Frameworks meteorjs 2017-04-20 - \"Fun\" with Javascript Frameworks express 2017-04-20 - \"Fun\" with Javascript Frameworks node 2017-08-14 - Raffler FTW 2017-04-20 - \"Fun\" with Javascript Frameworks nodejs 2017-08-14 - Raffler FTW 2017-04-20 - \"Fun\" with Javascript Frameworks reactjs 2017-04-20 - \"Fun\" with Javascript Frameworks framework 2017-08-14 - Raffler FTW 2017-04-20 - \"Fun\" with Javascript Frameworks systemjs 2017-08-14 - Raffler FTW 2017-04-20 - \"Fun\" with Javascript Frameworks webpack 2017-04-20 - \"Fun\" with Javascript Frameworks requirejs 2017-04-20 - \"Fun\" with Javascript Frameworks raffler 2017-08-14 - Raffler FTW 2017-04-20 - \"Fun\" with Javascript Frameworks typescript 2017-04-20 - \"Fun\" with Javascript Frameworks standard 2017-08-14 - Raffler FTW uccsc 2017-08-14 - Raffler FTW ucsd 2017-08-14 - Raffler FTW gulp 2017-08-14 - Raffler FTW task-runners 2017-08-14 - Raffler FTW"},{"title":"About","url":"/about/","tags":[],"body":"A lil' bit 'bout me. Hi :-) My name is Michael Chadwick, and I'm both a software developer and audio guy. I like to tinker with code, and I also like to make patterned, and sometimes unpatterned, air movements. Occasionally, these interests intersect and I make stuff that incorporate both."},{"title":"Home","url":"/","tags":[],"body":"Aug 14, 2017 Raffler FTW Since my last post, I’ve worked on Raffler quite a bit (it got its own domain, for one), making it warmer, juicier, and with a nice glaze around the edges. In sum, it’s approximately 476% better. It’s now ready to unveil publicly, after a beta test at UCCSC, a rad tech conference recently held at UC San Diego, so let’s dig into it and discuss some things that changed since last we raffled items in a random fashion. [ Full entry ] Apr 20, 2017 \"Fun\" with Javascript Frameworks I recently completed a new web app called Raffler that lets you take a list of items (usually names) and then “raffle” them (i.e. randomly choose one). It’s an extension of an older web app I made called Just Pick One, but except for some neat animation I added on the front-end design, the back-end logic was largely the same as always: one big honkin’ funcs.js file full of global variables and methods. Bad Mike, I know, I know, but it’s just how I function when I build from scratch. However, I know it’s “wrong” and I should adapt to modern development standards, so after a couple months of on-and-off toying with this new app, I finally modularized it in a more manageable state, but the journey was somewhat perilous as I ventured into the World of Javascript in 2017. [ Full entry ] Dec 21, 2016 Utter is now Utterly Presenting: Utterly, a macOS app that puts a GUI on top of Apple’s built-in speech synthesis technology. Download version 1.0! My previous attempt, Utter, has been rewritten with state-of-the-art tools and the newest of operating system version. Also, I added a picture of a cow to the app itself (instead of just the icon). [ Full entry ] Dec 6, 2016 Axeracer, my first Pico-8 game The Github Game Off is over, and my “finished” product is Axeracer (source). It’s a simple, one-track racing game that has you piloting a little insect car thing with axes for antennae, all the better to “hack” through the grassy track on your way to the finish line. This post is not meant to go over every detail of the game, but just to hit on some of the highlights. [ Full entry ] Nov 7, 2016 Game Development with Pico-8 Spurred on by Github’s Game Off game jam, and inspired by Hook, Line, and Thinker, I’ve decided to use Pico-8 as my game engine workplace, as writing everything from scratch can be a bit of an ordeal. An all-in-one minimalist design shop, Pico-8 has the ability to do the cart, sprites, and audio all in one neat little package. [ Full entry ] Oct 1, 2015 Gem Warrior: Part 3 (of 3): Gemcutting 101 (Previous posts 1 and 2) For the most part, Gem Warrior is done. What a blast it has been! I’m not sure I’ve worked so hard on a project in a long time. I made a game! How do I know I’m done? Besides the relative burnout I feel from working on it for a while, the features I most wanted to implement are in, and all the bugs that have cropped up (that I know ;P) are fixed. There is a world of Jool, a player to control, levels and abilities to attain, items to get and use (and equip if appropriate), monsters to fight, some people to talk to, and a final boss to defeat. It’s as complete a game as I’m willing to make it. Now, for the first time, I’m going to take a little walk through how the game works, both game-wise and code-wise, which will be long and detailed. However, if you are making a game in Ruby (or whatever), I think it may be enlightening. [ Full entry ] Jul 16, 2015 Gem Warrior: Part 2 (of Some Indeterminate Number) Much progress has been made on Gem Warrior since last I posted, and I’ve learned a bunch about Ruby and how to properly structure a game. I’ve also come to a fairly good stopping point where people can start to actually beta test the game and I can get much needed feedback outside of the echo chamber of my own head. [ Full entry ] Jun 8, 2015 Gem Warrior: Part 1 (of Who Knows) A game where you’re typing words on a command line is not exactly “modern gaming”, but it has a certain charm that tugs at a (hopefully) shared computing nostalgia. Also, it’s a lot easier to program something where the output is text, rather than graphics. Thus, I’ve embarked on a game development project called Gem Warrior, a roguelite text adventure, (eventually) replete with a juicy command list, glorious monsters, and a hyperkeen randomized world that challenges you to discover its seemingly boundless majesties, and defeat an Evil Guy to Win the Day! [ Full entry ] May 6, 2015 Don't Beep When You Can Feep I’ve been interested in sound and audio for a long time now. Probably from the time I heard my first beep or click from a child’s toy (can’t be sure), my mind got hooked on these air fluctuations and how to make more of them. Once I got into playing guitar and messing around on computers and patterned air movements (i.e. music), this became a fully-realized obsession. Even with all of the complexity inherent in my musical endeavors, the simple things still feel good, and if I can make a simple Ruby gem that can beep at you, then by Thor’s hammer I will! Ahem. [ Full entry ] Feb 3, 2015 Audio Manipulation with NAudio on Windows After much frustration with some low-level audio manipulation in Javascript, I decided to change gears and make my first Windows Form application using Visual Studio 2010 and a great 3rd-party audio library. Yes, it’s really 2015; I’m just behind. In this, I have gotten further in my goal of gluing disparate audio files into a single one. Which is pretty great. [ Full entry ] « Prev 1 2 3 4 5 Next »"},{"title":"Résumé","url":"/resume/index_print.html","tags":[],"body":"Work History Scripps Institution of Oceanography (sio.ucsd.edu) La Jolla, CA Programmer/Analyst May 2016 – Present Work with web team to create, administer, and develop for custom web applications UC San Diego Health System (health.ucsd.edu) San Diego, CA Programmer/Analyst (Web Services) May 2011 – May 2016 Work with team to create, administer and develop for custom SharePoint web applications Administer and support a mix of public and private SharePoint sites, ranging from SharePoint 2007 to 2013, and a handful of Classic ASP and other miscellaneous web applications Administer and support large internal SharePoint 2013 web application used by thousands of employees Create and maintain several custom SharePoint web parts using C# in Visual Studio Provide tech support for 30+ web/db/index Windows 2003/2008 servers Provide tech support for 5000+ user workstations Lead SharePoint site admin training classes Create and maintain several custom Powershell scripts (and modules) for server administration Programmer/Analyst (Facilities and Hospitality Services via UCSD Temp Services) Jul. 2010 – May 2011 Responsible for front-end design and back-end programming for internal facilities website Created website in Windows SharePoint Services 3.0 Added web/server controls customized using C# Created front-end interface in XHTML 1.1 and CSS 2.1, as well as client-side interaction using various jQuery plugins and custom scripts Responsible for front-end design for catering website Modified website in ASP.NET Customized front-end interface in XHTML 1.1 and CSS 2.1, as well as client-side interaction using various jQuery plugins and custom scripts Programmer/Analyst (Information and Telecommunications Services via UCSD Temp Services) Jul. 2009 – Jul. 2010 Responsible for front-end design and back-end programming for internal telecommunications website Created website in Visual Studio 2008 Added web/server controls customized using C#, including web form with file upload Created front-end interface in XHTML 1.1 and CSS 2.1, as well as client-side interaction using various jQuery plugins and custom scripts Responsible for front-end design and back-end programming mockup of web paging system Created web application in Visual Studio 2008 Created front-end interface in XHTML 1.1 and CSS 2.1, as well as client-side interaction using various jQuery plugins and custom scripts Responsible for SharePoint mockup of internal telecommunications website Customization of web-based database system (XHTML, CSS, Javascript, Classic ASP) e-Selex.com (e-Selex.com) Nov. 14, 2005 – Jul. 24, 2009 San Diego, CA Systems Technician Perform skilled repair and maintenance of all technology-related equipment Maintain several Windows- and Unix-based servers in-house and at datacenter Provide technical support to users on equipment setup/operation/troubleshooting Purchase and setup hardware/software when needed Manage RAID and tape backups Create marketing/sales materials for both print and web Created/maintained Windows 2003 Active Directory domain Implemented RSA SecureID on LAN, workstations; hard drive-level encryption on laptops Web Developer Primary: http://www.e-selex.com (all aspects) Secondary: http://www.smartselex.com (design) Tertiary: secure file transfer, marketing/demo, various other web applets Snapp & Associates Insurance Services, Inc. (snappins.com) Apr. 26, 2004 – Nov. 11, 2005 San Diego, CA Assistant to the IT Director Performed skilled repair and maintenance of all technology-related equipment Provided technical support to users on equipment setup/operation/troubleshooting Monitored, administered ~30-user LAN, satellite office with multiple remote users Jan. 2003 – Apr. 26, 2004 San Diego, CA Production Assistant Worked with producers to create effective management solutions for leads and sales Administered Commence RM relational database Created website, brochures, and other marketing materials University of California, San Diego Dept. of Alumni Relations (alumni.ucsd.edu) Jan. 2000 – Aug. 2002 San Diego, CA Webmaster Maintained and created new material for website: http://alumni.ucsd.edu Developed print and web-based informational materials Collaborated with co-workers on projects and website maintenance Education University of California, San Diego (ucsd.edu) Sep. 1999 – Jun. 2003 San Diego, CA Degree: BA in Interdisciplinary Computing in the Arts (ICAM – Emphasis in Music and Music Technology) The ICAM program aims to create the next generation of artists in a world of increasing connectivity in art, music and technology. Cognitive Science minor - Study of the brain, behavior, and computation, fitting in with the ICAM program by rounding out artistic and technological merits with a basis in scientific study and research. Technical Skills Development Technologies (Primary) PHP (Drupal, WP) (X)HTML(5), CSS(3) Javascript C# Ruby Objective-C/Swift Powershell Development Technologies (Other) Shell scripting Rust Go Development IDEs Atom Visual Studio Notepad++ TextMate Xcode Web Server Software Apache (XAMPP/MAMP/LAMP) IIS Jekyll Mongoose Database Systems MySQL MariaDB Microsoft SQL Server SQLite Content Management Systems cPanel SharePoint Wordpress Versioning Systems Git Team Foundation Server Visual Sourcesafe RCS Mercurial SVN Project Management Atlassian (Jira/Confluence) Zendesk Microsoft Project Image Manipulation Adobe Photoshop Paint.NET Operating Systems Apple OS X and iOS Linux/Unix Microsoft Windows Personal Development/Blogging http://codana.me - code blogging http://github.com/michaelchadwick - open-source projects http://puppybongos.wordpress.com - home of Standing Desk App"},{"title":"Résumé","url":"/resume/mus.html","tags":[],"body":"Original Albums Close to the Metal (nebyoolae.com) July 10, 2017 Composer/Recording Artist/Engineer Several remix/covers, all using tracks from NES games starting with \"Metal\" Composed, sequenced, and mixed in Logic Pro X Quoth the Raven (DrupalCon 2017 Baltimore OST) (nebyoolae.com) April 28, 2017 Composer/Recording Artist/Engineer 6-song EP inspired by my time at DrupalCon 2017 in Baltimore, MD One track written each day of the conference Composed, sequenced, and mixed in Logic Pro X Gray (nebyoolae.com) January 22, 2017 Composer/Recording Artist/Engineer 5-song EP about anything and nothing Synths and samples Composed, sequenced, and mixed in Logic Pro X Northwest Passage (nebyoolae.com) October 5, 2015 Composer/Recording Artist/Engineer Alaskan vacation city themes Composed, sequenced, and mixed entirely on GarageBand for iOS Quibblings (OST) (nebyoolae.com) April 3, 2015 Composer/Recording Artist/Engineer Podcast cues Sequenced samples/synths Lullabies (nebyoolae.com) December 7, 2014 Composer/Recording Artist/Engineer Short solo acoustic guitar pieces One piece per major key (plus 3 additional ones for some accidental keys) Dumeh in Cm, Op. 1, No. 1 (nebyoolae.com) September 22, 2014 Composer/Recording Artist/Engineer Orchestral piece (powered by virtual instruments) in a traditional sonata (fast-slow-fast) form Culmination of over a decade of on-and-off composition and rewriting Soundtrack to a Life EP (nebyoolae.com) September 7, 2014 Composer/Recording Artist/Engineer Thematic pieces composed for personal travel videos amassed into one collection Played all stringed instruments Marco's Minefield OST (nebyoolae.com) June 6, 2014 Composer/Recording Artist/Engineer Original soundtrack composed for Game Jolt Entry: Marco's Minefield Sequenced samples/synths Music For Things (nebyoolae.com) May 7, 2014 Composer/Recording Artist/Engineer Various tracks written and recorded for other people's projects Played all stringed instruments Sequenced samples/synths The Escort Mission OST (nebyoolae.com) April 10, 2014 Composer/Recording Artist/Engineer Variations on two themes written for a podcast Played all stringed instruments Sequenced samples/synths Vox Venio OST (nebyoolae.com) April 8, 2014 Composer/Recording Artist/Engineer Soundtrack of lo-fi electronic rock for unfinished video game Composed and sequenced primarily on Nanostudio Sequenced samples/synths Gamey Stew (nebyoolae.com) October 16, 2013 Composer/Recording Artist/Engineer Collection of electronic/rock covers and remixes of video game tracks Played all stringed instruments Sequenced samples/synths Rok Muzik (nebyoolae.com) February 9, 2013 Composer/Recording Artist/Engineer Collection of electronic pieces Older projects that were done during M.U.S.I.K. sessions, updated with better understanding of Logic Pushing Hands (OST) (nebyoolae.com) December 20, 2012 Composer/Recording Artist/Engineer Mini-EP of laid-back electronic tunes for puzzle game soundtrack Stringing You Along (nebyoolae.com) August 28, 2012 Composer/Recording Artist/Engineer Collection of solo acoustic guitar pieces Most selections are covers, but four are originals Created mainly to be a portfolio of sorts to use for future clients Zoetic (nebyoolae.com) March 1, 2012 Composer/Recording Artist/Engineer Wrote and recorded an instrumental rock album All guitars and bass guitars were recorded live Drums are sampled from Toontrack's Superior Drummer library Impulse (OST) (nebyoolae.com) March 1, 2012 Composer/Recording Artist/Engineer Contributed several short themes in an ambient/electronica style to be included in a free indie game Largely synth based, utilizing CamelAudio's Alchemy Player and sounds Gamey Mixture (nebyoolae.com) September 10, 2010 Composer/Recording Artist/Engineer Remixed video game themes from NES, Game Boy, and SNES in new styles Styles range from instrumental guitar rock to electronic dance Recorded all guitar, bass, and vocals Sequenced drums and synths The Matic (nebyoolae.com) August 27, 2010 Composer/Recording Artist/Engineer Wrote short themes in a classical/orchestral style Created short videos of varying subjects to sync with particular theme Majicking (nebyoolae.com) September 22, 2009 Composer/Engineer Fast-paced rocktronica (rock + electronica) Sequenced sampled instruments and synths in Logic Pro Average Town (nebyoolae.com) February 9, 2009 Composer/Engineer Nostalgic, lo-fi, NES-style compositions Sequenced square, triangle, sine waves, and ADSR-enveloped white noise in Logic Pro Ebben Flow (Original Soundtrack) (ef.nebyoolae.com) July 8, 2008 Composer/Engineer Created themes for various stereotypical RPG cues (battle, characters, etc.) Sequenced samples, synths, and effects in Logic Pro Primary (iTunes)(AmazonMP3)(CD Baby) Pure Yellow Colour (pureyellow.net) April 10, 2008 Guitarist/Bassist/Co-composer/Engineer Played guitar and bass Handled recording of all parts Sequenced guitar, drums, drums, vocals and other effects in Logic Pro Music Unsolicitedly Started Idiosyncratically for Karma (M.U.S.I.K.) (nebyoolae.com) August 1, 2006 – August 31, 2006 Guitarist/Bassist/Vocalist/Engineer Recorded one piece of music each day for an entire month Most songs sequenced in Logic Pro 5, some in free audio editor Audacity Most pieces featured either acoustic or electric guitar Music Unsolicitedly Started Idiosyncratically for Karma (M.U.S.I.K.) (nebyoolae.com) October 1, 2003 – October 31, 2003 Guitarist/Bassist/Vocalist/Engineer Recorded one piece of music each day for an entire month Most songs sequenced in Logic Pro 5, some in free audio editor Audacity Most pieces featured either acoustic or electric guitar Clocks Striking 13 (nebyoolae.com) August 1, 2002 – August 31, 2002 Guitarist/Bassist/Engineer Original instrumental guitar rock album Sequenced guitar, bass, drums in Cakewalk Guitar Tracks Songs written over several years; album recorded in one month Contributions \"Wild Beast\" - Joseph Toscano Vir Heroicus - Everyone is An Artist (virheroicus.com) July 3rd, 2008 Guitarist/Co-composer/Co-engineer Contributed guitar recording as well as musical progression \"Santa Monica\" - Michael Shapiro Natalie Nicole Gilbert - Slip of the Tongue 2005 demo (single released 2010) Guitarist Contributed acoustic guitar rhythm/lead idea for song Performance Experience Private Alumni Reception UCSD, San Diego, CA June 2014 Played guitar for private reception Private Wedding Reception Rancho Bernardo Inn, San Diego, CA May 2013 Played guitar for private reception Private Wedding Ceremony Hyatt Mission Bay, San Diego, CA July 2012 Played guitar for private ceremony Private Wedding Ceremony Stone Brewing Company, Escondido, CA October 2010 Played guitar with singer for private ceremony Private Wedding Ceremony The Abbey, San Diego, CA October 2009 Played guitar for private ceremony Pure Yellow Colour (pyc.nebyoolae.com) July 2006 – April 2008 Play guitar with other guitarist/singer/songwriter Practice original songs as well as covers; many jam sessions Two single-billing concerts performed; 20+ open-mic appearances Russyoolae 2006 – current Play guitar or bass with drummer (very rarely with keyboardist, as well) in jam sessions Minor Flooding 2002 – 2004 Played guitar with other guitarist/singer/songwriter, drummer, various others Practiced original songs as well as covers; many jam sessions Impromptu Guitar Teaching 1999 – current Occasionally teach guitar to friends when asked Eastlake Community Church Youth Group 1997 – 1999 Played acoustic and electric guitar in band with other guitarists, bassists, drummer, keyboardist, singers Practiced and played once a week for youth group Performed with morning church service for special Easter program Work History California Music Studios (californiamusicstudios.com) Carlsbad, CA Apr 2006 – Jan 2007 Private Guitar Tutor Contractor Taught several students simultaneously in-house, as well as in private residences Self-Employed San Diego, CA May 2004 – Jul 2004 Private Guitar Tutor for Mathew Crawford Education University of California San Diego (ucsd.edu) San Diego, CA Sep 1999 – June 2003 BA Interdisciplinary Computing in the Arts (Music Emphasis) Minor in Cognitive Science Technical Skills Audio Production/Sequencing Editors Apple: Garageband, Logic Studio Audacity Nanostudio (iOS) Pro Tools Steinberg Cubase Personal Websites Nebyoolae.com (nebyoolae.com) Bandcamp site with all major releases Soundcloud.com (soundcloud.com) Soundcloud profile with non-official singles Pure Yellow Colour (pyc.nebyoolae.com) Features news blog, show list, image gallery, song lyrics for indie rock band Man Cave Jam (mcj.nebyoolae.com) Features sample jams from group of friends I'm also a Software Developer | IT Specialist"},{"title":"","url":"/resume/mus_print.html","tags":[],"body":"Original Albums Close to the Metal (nebyoolae.com) July 10, 2017 Composer/Recording Artist/Engineer Several remix/covers, all using tracks from NES games starting with \"Metal\" Composed, sequenced, and mixed in Logic Pro X Quoth the Raven (DrupalCon 2017 Baltimore OST) (nebyoolae.com) April 28, 2017 Composer/Recording Artist/Engineer 6-song EP inspired by my time at DrupalCon 2017 in Baltimore, MD One track written each day of the conference Composed, sequenced, and mixed in Logic Pro X Gray (nebyoolae.com) January 22, 2017 Composer/Recording Artist/Engineer 5-song EP about anything and nothing Synths and samples Composed, sequenced, and mixed in Logic Pro X Northwest Passage (nebyoolae.com) October 5, 2015 Composer/Recording Artist/Engineer Alaskan vacation city themes Composed, sequenced, and mixed entirely on GarageBand for iOS Quibblings (OST) (nebyoolae.com) April 3, 2015 Composer/Recording Artist/Engineer Podcast cues Sequenced samples/synths Lullabies (nebyoolae.com) December 7, 2014 Composer/Recording Artist/Engineer Short solo acoustic guitar pieces One piece per major key (plus 3 additional ones for some accidental keys) Dumeh in Cm, Op. 1, No. 1 (nebyoolae.com) September 22, 2014 Composer/Recording Artist/Engineer Orchestral piece (powered by virtual instruments) in a traditional sonata (fast-slow-fast) form Culmination of over a decade of on-and-off composition and rewriting Soundtrack to a Life EP (nebyoolae.com) September 7, 2014 Composer/Recording Artist/Engineer Thematic pieces composed for personal travel videos amassed into one collection Played all stringed instruments Marco's Minefield OST (nebyoolae.com) June 6, 2014 Composer/Recording Artist/Engineer Original soundtrack composed for Game Jolt Entry: Marco's Minefield Sequenced samples/synths Music For Things (nebyoolae.com) May 7, 2014 Composer/Recording Artist/Engineer Various tracks written and recorded for other people's projects Played all stringed instruments Sequenced samples/synths The Escort Mission OST (nebyoolae.com) April 10, 2014 Composer/Recording Artist/Engineer Variations on two themes written for a podcast Played all stringed instruments Sequenced samples/synths Vox Venio OST (nebyoolae.com) April 8, 2014 Composer/Recording Artist/Engineer Soundtrack of lo-fi electronic rock for unfinished video game Composed and sequenced primarily on Nanostudio Sequenced samples/synths Gamey Stew (nebyoolae.com) October 16, 2013 Composer/Recording Artist/Engineer Collection of electronic/rock covers and remixes of video game tracks Played all stringed instruments Sequenced samples/synths Rok Muzik (nebyoolae.com) February 9, 2013 Composer/Recording Artist/Engineer Collection of electronic pieces Older projects that were done during M.U.S.I.K. sessions, updated with better understanding of Logic Pushing Hands (OST) (nebyoolae.com) December 20, 2012 Composer/Recording Artist/Engineer Mini-EP of laid-back electronic tunes for puzzle game soundtrack Stringing You Along (nebyoolae.com) August 28, 2012 Composer/Recording Artist/Engineer Collection of solo acoustic guitar pieces Most selections are covers, but four are originals Created mainly to be a portfolio of sorts to use for future clients Zoetic (nebyoolae.com) March 1, 2012 Composer/Recording Artist/Engineer Wrote and recorded an instrumental rock album All guitars and bass guitars were recorded live Drums are sampled from Toontrack's Superior Drummer library Impulse (OST) (nebyoolae.com) March 1, 2012 Composer/Recording Artist/Engineer Contributed several short themes in an ambient/electronica style to be included in a free indie game Largely synth based, utilizing CamelAudio's Alchemy Player and sounds Gamey Mixture (nebyoolae.com) September 10, 2010 Composer/Recording Artist/Engineer Remixed video game themes from NES, Game Boy, and SNES in new styles Styles range from instrumental guitar rock to electronic dance Recorded all guitar, bass, and vocals Sequenced drums and synths The Matic (nebyoolae.com) August 27, 2010 Composer/Recording Artist/Engineer Wrote short themes in a classical/orchestral style Created short videos of varying subjects to sync with particular theme Majicking (nebyoolae.com) September 22, 2009 Composer/Engineer Fast-paced rocktronica (rock + electronica) Sequenced sampled instruments and synths in Logic Pro Average Town (nebyoolae.com) February 9, 2009 Composer/Engineer Nostalgic, lo-fi, NES-style compositions Sequenced square, triangle, sine waves, and ADSR-enveloped white noise in Logic Pro Ebben Flow (Original Soundtrack) (ef.nebyoolae.com) July 8, 2008 Composer/Engineer Created themes for various stereotypical RPG cues (battle, characters, etc.) Sequenced samples, synths, and effects in Logic Pro Primary (iTunes)(AmazonMP3)(CD Baby) Pure Yellow Colour (pureyellow.net) April 10, 2008 Guitarist/Bassist/Co-composer/Engineer Played guitar and bass Handled recording of all parts Sequenced guitar, drums, drums, vocals and other effects in Logic Pro Music Unsolicitedly Started Idiosyncratically for Karma (M.U.S.I.K.) (nebyoolae.com) August 1, 2006 – August 31, 2006 Guitarist/Bassist/Vocalist/Engineer Recorded one piece of music each day for an entire month Most songs sequenced in Logic Pro 5, some in free audio editor Audacity Most pieces featured either acoustic or electric guitar Music Unsolicitedly Started Idiosyncratically for Karma (M.U.S.I.K.) (nebyoolae.com) October 1, 2003 – October 31, 2003 Guitarist/Bassist/Vocalist/Engineer Recorded one piece of music each day for an entire month Most songs sequenced in Logic Pro 5, some in free audio editor Audacity Most pieces featured either acoustic or electric guitar Clocks Striking 13 (nebyoolae.com) August 1, 2002 – August 31, 2002 Guitarist/Bassist/Engineer Original instrumental guitar rock album Sequenced guitar, bass, drums in Cakewalk Guitar Tracks Songs written over several years; album recorded in one month Contributions \"Wild Beast\" - Joseph Toscano Vir Heroicus - Everyone is An Artist (virheroicus.com) July 3rd, 2008 Guitarist/Co-composer/Co-engineer Contributed guitar recording as well as musical progression \"Santa Monica\" - Michael Shapiro Natalie Nicole Gilbert - Slip of the Tongue 2005 demo (single released 2010) Guitarist Contributed acoustic guitar rhythm/lead idea for song Performance Experience Private Alumni Reception UCSD, San Diego, CA June 2014 Played guitar for private reception Private Wedding Reception Rancho Bernardo Inn, San Diego, CA May 2013 Played guitar for private reception Private Wedding Ceremony Hyatt Mission Bay, San Diego, CA July 2012 Played guitar for private ceremony Private Wedding Ceremony Stone Brewing Company, Escondido, CA October 2010 Played guitar with singer for private ceremony Private Wedding Ceremony The Abbey, San Diego, CA October 2009 Played guitar for private ceremony Pure Yellow Colour (pyc.nebyoolae.com) July 2006 – April 2008 Play guitar with other guitarist/singer/songwriter Practice original songs as well as covers; many jam sessions Two single-billing concerts performed; 20+ open-mic appearances Russyoolae 2006 – current Play guitar or bass with drummer (very rarely with keyboardist, as well) in jam sessions Minor Flooding 2002 – 2004 Played guitar with other guitarist/singer/songwriter, drummer, various others Practiced original songs as well as covers; many jam sessions Impromptu Guitar Teaching 1999 – current Occasionally teach guitar to friends when asked Eastlake Community Church Youth Group 1997 – 1999 Played acoustic and electric guitar in band with other guitarists, bassists, drummer, keyboardist, singers Practiced and played once a week for youth group Performed with morning church service for special Easter program Work History California Music Studios (californiamusicstudios.com) Carlsbad, CA Apr 2006 – Jan 2007 Private Guitar Tutor Contractor Taught several students simultaneously in-house, as well as in private residences Self-Employed San Diego, CA May 2004 – Jul 2004 Private Guitar Tutor for Mathew Crawford Education University of California San Diego (ucsd.edu) San Diego, CA Sep 1999 – June 2003 BA Interdisciplinary Computing in the Arts (Music Emphasis) Minor in Cognitive Science Technical Skills Audio Production/Sequencing Editors Apple: Garageband, Logic Studio Audacity Nanostudio (iOS) Pro Tools Steinberg Cubase Personal Websites Nebyoolae.com (nebyoolae.com) Bandcamp site with all major releases Soundcloud.com (soundcloud.com) Soundcloud profile with non-official singles Pure Yellow Colour (pyc.nebyoolae.com) Features news blog, show list, image gallery, song lyrics for indie rock band Man Cave Jam (mcj.nebyoolae.com) Features sample jams from group of friends"},{"title":"Résumé","url":"/resume/net.html","tags":[],"body":"Work History Scripps Institution of Oceanography (sio.ucsd.edu) La Jolla, CA Programmer/Analyst May 2016 – Present Work with web team to create, administer, and develop for custom web applications UC San Diego Health System (health.ucsd.edu) San Diego, CA Programmer/Analyst (Web Services) May 2011 – Present Work with team to create, administer and develop for custom Sharepoint web applications Administer and support 60+ public Sharepoint 2007, 10+ public Sharepoint 2010, and a handful of Classic ASP and other miscellaneous web applications Administer and support large internal Sharepoint 2010 web application used by thousands of employees Create and maintain several custom Sharepoint web parts using C# in Visual Studio Provide tech support for 30+ web/db/index Windows 2003/2008 servers Provide tech support for 5000+ user workstations Assist with new employee hiring and training Co-run Sharepoint superuser training classes Programmer/Analyst (Facilities and Hospitality Services via UCSD Temp Services) Jul. 2010 – May 2011 Responsible for front-end design and back-end programming for internal facilities website Created website in Windows Sharepoint Services 3.0 Added web/server controls customized using C# Created front-end interface in XHTML 1.1 and CSS 2.1, as well as client-side interaction using various jQuery plugins and custom scripts Responsible for front-end design for catering website Modified website in ASP.NET Customized front-end interface in XHTML 1.1 and CSS 2.1, as well as client-side interaction using various jQuery plugins and custom scripts Programmer/Analyst (Information and Telecommunications Services via UCSD Temp Services) Jul. 2009 – Jul. 2010 Responsible for front-end design and back-end programming for internal telecommunications website Created website in Visual Studio 2008 Added web/server controls customized using C#, including web form with file upload Created front-end interface in XHTML 1.1 and CSS 2.1, as well as client-side interaction using various jQuery plugins and custom scripts Responsible for front-end design and back-end programming mockup of web paging system Created web application in Visual Studio 2008 Created front-end interface in XHTML 1.1 and CSS 2.1, as well as client-side interaction using various jQuery plugins and custom scripts Responsible for SharePoint mockup of internal telecommunications website Customization of web-based database system (XHTML, CSS, Javascript, Classic ASP) e-Selex.com (e-Selex.com) Nov. 14, 2005 – Jul. 24, 2009 San Diego, CA Systems Technician Perform skilled repair and maintenance of all technology-related equipment Maintain several Windows- and Unix-based servers in-house and at datacenter Provide technical support to users on equipment setup/operation/troubleshooting Purchase and setup hardware/software when needed Manage RAID and tape backups Create marketing/sales materials for both print and web Created/maintained Windows 2003 Active Directory domain Implemented RSA SecureID on LAN, workstations; hard drive-level encryption on laptops Web development/design for multiple projects Snapp & Associates Insurance Services, Inc. (snappins.com) Apr. 26, 2004 – Nov. 11, 2005 San Diego, CA Assistant to the IT Director Performed skilled repair and maintenance of all technology-related equipment Provided technical support to users on equipment setup/operation/troubleshooting Monitored, administered ~30-user LAN, satellite office with multiple remote users Jan. 2003 – Apr. 26, 2004 San Diego, CA Production Assistant Worked with producers to create effective management solutions for leads and sales Administered Commence RM relational database Created website, brochures, and other marketing materials Scripps Institution of Oceanography Office of (Dr. Andrew Dickson) (andrew.ucsd.edu) May 2002 – May 2003 San Diego, CA Web Production Assistant Created new website from scratch: http://andrew.ucsd.edu Developed and administered FileMaker Pro database-driven website Administered Macintosh OS 9 workstation and set up OS X server University of California, San Diego Dept. of Alumni Relations (alumni.ucsd.edu) Jan. 2000 – Aug. 2002 San Diego, CA Webmaster Maintained and created new material for website: http://alumni.ucsd.edu Developed print and web-based informational materials Collaborated with co-workers on projects and website maintenance Act-1 Temp Agency (act-1.com) Aug. 1999 – Sep. 1999 Thousand Oaks, CA Telemarketer Administered advertising effectiveness survey to real estate representatives Peter Komasa Sentra Securities Mar. 1999 – July 1999 Bonita, CA Webmaster Basic computer skills training Created website: http://www.livingadvantage.com (expired) Computer Smart Summer 1998 Ramona, CA Production Assistant Assembled Windows-based personal computers from individual parts Education University of California, San Diego (ucsd.edu) Sep. 1999 – Jun. 2003 San Diego, CA Degree: BA in Interdisciplinary Computing in the Arts (ICAM – Emphasis in Music and Music Technology) The ICAM program aims to create the next generation of artists in a world of increasing connectivity in art, music and technology. Cognitive Science minor - Study of the brain, behavior, and computation, fitting in with the ICAM program by rounding out artistic and technological merits with a basis in scientific study and research. Technical Skills Backup/Recovery Systems APC UPS DocAve HP Ultrium LTO Symantec BackupExec Database Management Systems Commence Relation Manager FileMaker Pro MSSQL MySQL SQLite SugarCRM TAM (The Agency Manager) Email Server Systems Ipswitch Imail Microsoft Exchange Zimbra Collaboration Suite Image Design Adobe Acrobat Adobe AfterEffects Adobe Illustrator Adobe Pagemaker Adobe Photoshop Paint.NET Networking Concepts/Tools DNS FTP HTTP IMAP/POP RDP SMTP SSH SSL TCP/IP Telnet VNC VPN VPS Networking Hardware Ethernet cabling Firewalls (SonicWALL) Hubs Intrusion Detection Systems (Cisco) Load Balancers (Alteon, Cisco) NICs Routers (Cisco, D-Link, Linksys) Switches (Cisco, Linksys) Networking Software Apache BIND CPanel Microsoft Active Directory/IIS phpMyAdmin Putty SecureCRT Office Software Access Excel Infopath Outlook PowerPoint Publisher Visio Word Operating Systems DOS Linux (Red Hat, Ubuntu) Mac OS 9 and X Unix (FreeBSD) Windows: 3.1, 95, 98, NT 4.0, 2k/2k3, XP, Vista, 7, 8 Security Applications RSA SecurID for Windows (client/server software and key fobs) Software Development ASP.NET (C#, Powershell) Bash shell scripting (X)HTML (CSS) JavaScript (Ajax, jQuery) Objective-C (Cocoa) PHP (CakePHP) Ruby (on Rails) Software Development IDE Notepad++ (Win) TextMate (Mac) Visual Studio (Win) Xcode (Mac) Version Control Systems Git Mercurial SVN Team Foundation Server Visual Sourcesafe I'm also a Software Developer | Musician"},{"title":"","url":"/resume/net_print.html","tags":[],"body":"Work History Scripps Institution of Oceanography (sio.ucsd.edu) La Jolla, CA Programmer/Analyst May 2016 – Present Work with web team to create, administer, and develop for custom web applications UC San Diego Health System (health.ucsd.edu) San Diego, CA Programmer/Analyst (Web Services) May 2011 – Present Work with team to create, administer and develop for custom Sharepoint web applications Administer and support 60+ public Sharepoint 2007, 10+ public Sharepoint 2010, and a handful of Classic ASP and other miscellaneous web applications Administer and support large internal Sharepoint 2010 web application used by thousands of employees Create and maintain several custom Sharepoint web parts using C# in Visual Studio Provide tech support for 30+ web/db/index Windows 2003/2008 servers Provide tech support for 5000+ user workstations Assist with new employee hiring and training Co-run Sharepoint superuser training classes Programmer/Analyst (Facilities and Hospitality Services via UCSD Temp Services) Jul. 2010 – May 2011 Responsible for front-end design and back-end programming for internal facilities website Created website in Windows Sharepoint Services 3.0 Added web/server controls customized using C# Created front-end interface in XHTML 1.1 and CSS 2.1, as well as client-side interaction using various jQuery plugins and custom scripts Responsible for front-end design for catering website Modified website in ASP.NET Customized front-end interface in XHTML 1.1 and CSS 2.1, as well as client-side interaction using various jQuery plugins and custom scripts Programmer/Analyst (Information and Telecommunications Services via UCSD Temp Services) Jul. 2009 – Jul. 2010 Responsible for front-end design and back-end programming for internal telecommunications website Created website in Visual Studio 2008 Added web/server controls customized using C#, including web form with file upload Created front-end interface in XHTML 1.1 and CSS 2.1, as well as client-side interaction using various jQuery plugins and custom scripts Responsible for front-end design and back-end programming mockup of web paging system Created web application in Visual Studio 2008 Created front-end interface in XHTML 1.1 and CSS 2.1, as well as client-side interaction using various jQuery plugins and custom scripts Responsible for SharePoint mockup of internal telecommunications website Customization of web-based database system (XHTML, CSS, Javascript, Classic ASP) e-Selex.com (e-Selex.com) Nov. 14, 2005 – Jul. 24, 2009 San Diego, CA Systems Technician Perform skilled repair and maintenance of all technology-related equipment Maintain several Windows- and Unix-based servers in-house and at datacenter Provide technical support to users on equipment setup/operation/troubleshooting Purchase and setup hardware/software when needed Manage RAID and tape backups Create marketing/sales materials for both print and web Created/maintained Windows 2003 Active Directory domain Implemented RSA SecureID on LAN, workstations; hard drive-level encryption on laptops Web development/design for multiple projects Snapp & Associates Insurance Services, Inc. (snappins.com) Apr. 26, 2004 – Nov. 11, 2005 San Diego, CA Assistant to the IT Director Performed skilled repair and maintenance of all technology-related equipment Provided technical support to users on equipment setup/operation/troubleshooting Monitored, administered ~30-user LAN, satellite office with multiple remote users Jan. 2003 – Apr. 26, 2004 San Diego, CA Production Assistant Worked with producers to create effective management solutions for leads and sales Administered Commence RM relational database Created website, brochures, and other marketing materials Scripps Institution of Oceanography Office of (Dr. Andrew Dickson) (andrew.ucsd.edu) May 2002 – May 2003 San Diego, CA Web Production Assistant Created new website from scratch: http://andrew.ucsd.edu Developed and administered FileMaker Pro database-driven website Administered Macintosh OS 9 workstation and set up OS X server University of California, San Diego Dept. of Alumni Relations (alumni.ucsd.edu) Jan. 2000 – Aug. 2002 San Diego, CA Webmaster Maintained and created new material for website: http://alumni.ucsd.edu Developed print and web-based informational materials Collaborated with co-workers on projects and website maintenance Act-1 Temp Agency (act-1.com) Aug. 1999 – Sep. 1999 Thousand Oaks, CA Telemarketer Administered advertising effectiveness survey to real estate representatives Peter Komasa Sentra Securities Mar. 1999 – July 1999 Bonita, CA Webmaster Basic computer skills training Created website: http://www.livingadvantage.com (expired) Computer Smart Summer 1998 Ramona, CA Production Assistant Assembled Windows-based personal computers from individual parts Education University of California, San Diego (ucsd.edu) Sep. 1999 – Jun. 2003 San Diego, CA Degree: BA in Interdisciplinary Computing in the Arts (ICAM – Emphasis in Music and Music Technology) The ICAM program aims to create the next generation of artists in a world of increasing connectivity in art, music and technology. Cognitive Science minor - Study of the brain, behavior, and computation, fitting in with the ICAM program by rounding out artistic and technological merits with a basis in scientific study and research. Technical Skills Backup/Recovery Systems APC UPS DocAve HP Ultrium LTO Symantec BackupExec Database Management Systems Commence Relation Manager FileMaker Pro MSSQL MySQL SQLite SugarCRM TAM (The Agency Manager) Email Server Systems Ipswitch Imail Microsoft Exchange Zimbra Collaboration Suite Image Design Adobe Acrobat Adobe AfterEffects Adobe Illustrator Adobe Pagemaker Adobe Photoshop Paint.NET Networking Concepts/Tools DNS FTP HTTP IMAP/POP RDP SMTP SSH SSL TCP/IP Telnet VNC VPN VPS Networking Hardware Ethernet cabling Firewalls (SonicWALL) Hubs Intrusion Detection Systems (Cisco) Load Balancers (Alteon, Cisco) NICs Routers (Cisco, D-Link, Linksys) Switches (Cisco, Linksys) Networking Software Apache BIND CPanel Microsoft Active Directory/IIS phpMyAdmin Putty SecureCRT Office Software Access Excel Infopath Outlook PowerPoint Publisher Visio Word Operating Systems DOS Linux (Red Hat, Ubuntu) Mac OS 9 and X Unix (FreeBSD) Windows: 3.1, 95, 98, NT 4.0, 2k/2k3, XP, Vista, 7, 8 Security Applications RSA SecurID for Windows (client/server software and key fobs) Software Development ASP.NET (C#, Powershell) Bash shell scripting (X)HTML (CSS) JavaScript (Ajax, jQuery) Objective-C (Cocoa) PHP (CakePHP) Ruby (on Rails) Software Development IDE Notepad++ (Win) TextMate (Mac) Visual Studio (Win) Xcode (Mac) Version Control Systems Git Mercurial SVN Team Foundation Server Visual Sourcesafe"},{"title":"Home","url":"/page2/","tags":[],"body":"Jan 22, 2015 Playing with Javascript and the Web Audio API While working on a tool in Ruby to make sampler tracks out of several album components, I realized I did not yet know enough about how to manipulate audio to do what I wanted. I needed to approach it from a different vantage point, and a different language altogether. So, I decided to see what the state of audio on the web was, having not done much beyond hosting and downloading MP3s years ago. Spoiler: it’s pretty frickin’ cool now, guys. [ Full entry ] Jan 7, 2015 Some Fun New Web Projects to Kick Off 2015 2015 is apparently the year that I get inspired to work on web projects again, and rediscover the joys of the change-refresh cycle, JavaScript/jQuery, and HTML5. I just finished (is that really possible, though?) a couple new web apps and I’d like to drop some knowledge about them. [ Full entry ] Nov 23, 2014 Sending Gmail from OS X Yosemite Terminal I’ve messed around with my own personal file host system for years, so that I could share stuff with others over the Internet. Initially, it was just a lazy (FTP to host) + (email link to friend) system. However, the uber way to handle something like this is to write a slick terminal script one-liner. My OS of choice is OS X and I updated to Yosemite recently, so I decided to figure out how to do it and I’m thinking someone out there may find this information useful for any script that needs email capability. [ Full entry ] Jul 8, 2014 Commanding the Line $ echo 'Hello World!' Graphical User Interfaces (GUIs) are a great thing and they make computing a lot easier. I’ve been fiddling with audio programming a bit lately (mainly loading/modifying/saving WAV files), and while getting your hands dirty allows for more flexibility and automation, I still love Audacity and Logic for their accessibility. That being said, the command line is still often more powerful, but it comes with a higher learning curve. That, and it still feels like magic most days. [ Full entry ] Jun 26, 2014 Playing with Ruby Audio I’ve got a bunch of albums on Bandcamp. They’re generally anywhere from 20-50 minutes long. Sometimes, you just want to test out something and not try to take in the whole enchilada in one sitting, so I decided a while ago to start making “samplers” that are ~2 minutes long and provide a kind of appetizer mashup option. This is kind of tedious, so what else but code could come to the rescue! [ Full entry ] Jun 19, 2014 Adventures in Spritekit For some reason, I’ve really wanted to make a game lately. I play them so often that it’s natural that I’d eventually want to make one. My recent renaissance in personal development is helpful in accomplishing this goal. But where to start? [ Full entry ] Jun 16, 2014 Excluding Pages from Top Navigation in Jekyll While dynamic creation of collections of variables is often a very helpful thing, sometimes it treats all its members the same, even though they are not. Jekyll, the tech that creates this very site, is a bit non-picky about what it puts in its site-wide navigation, but it can be taught. [ Full entry ] Jun 15, 2014 My Favorite Mac Apps As promised a few days ago, I come back to you with my list of favorite apps and utilities, only on the Apple side of things. [ Full entry ] Jun 12, 2014 My Favorite Windows Apps People love lists. The Internet especially loves lists. It’s no surprise, really: a note followed by another note in a simple, structured order is easy to follow and gain knowledge from. Thus, it’s time to kick this new blog off with a tried-and-true, yet still hopefully useful, list of my favorite Windows apps. [ Full entry ] Jun 9, 2014 Codana.me is my new dev blog Code(dev) + coda(music) + name + wanton need to use a specialized TLD = codana.me :) [ Full entry ] « Prev 1 2 3 4 5 Next »"},{"title":"Home","url":"/page3/","tags":[],"body":"Jun 1, 2014 New coding interest (for now): Lita handlers My friend Jimothy L. Quadratic made something pretty neat a while ago: Lita (a chat bot). He surpassed me in coding ability and interest a long time ago, and has been progressively making a name for himself on the Internet with all sorts of projects besides Lita, too, but his chat bottery seems to have garnered the most attention thus far. [ Full entry ] May 19, 2014 New coding project: Utter I've used say.app off and on for many years to play around with the OSX say command, and grab the occasional text-as-audio file for various projects. It's the quickest and easiest way to get speech in digital audio form via a GUI on a Mac that I know of (awfully specific, but still useful!). [ Full entry ] Mar 10, 2014 IGDA Meetup I'm not a game developer, but I like to think I could be one in some way, so a few weeks ago I attended an IGDA meetup in San Diego. It was the first official one in many months (efforts have been in effect to get the local chapter humming again). A nearby \"barcade\" -- think small bar plus old coin-op games surrounding the tiny space -- hosted and it was a blast. [ Full entry ] Dec 2, 2013 Oculus Rift Oculus Rift! I got to try one! It pays to know people who know people who buy things like this. [ Full entry ] Sep 25, 2013 Logic Pro X: A Cursory Review The new Logic Pro X is pretty awesome. A totally new coat of paint and a load of new features means that it takes some time to get used to it. I dig the new interface a lot, but I'm still learning its new quirks. Disappearing plugins and UI oddities keep me from being 100% satisfied with it, but I'm getting there. [ Full entry ] May 23, 2013 Installing Windows on Your Mac When You Have No Internal Optical Drive We have many computers at home. Between my wife and I, there're plenty of ways to surf the Internet, watch Netflix, and play computer games. However, not all computers are equal in power, and there're reasons to use one over another. This brings me to an on-and-off again struggle I've recently gone through, but ultimately succeeded at!, to put Windows on my 2011-era MacBook Pro. [ Full entry ] Mar 13, 2013 Railsbridge San Diego Last weekend I did something I'd never done before: helped out at a programming workshop. My wife can say the same, cuz she came along and not only helped out, but was an excellent programming \"student\". I was really jazzed that she was interested and actually had fun. [ Full entry ] Dec 3, 2012 Dumeh, Musically There's this little project I've been working on for about, oh, a decade now. I call it \"Dumeh\". It's a modern (meaning it's probably a little too pop-ish, has a drumkit, and I wrote it in the 2000s) symphony in three parts (fast-slow-fast), and is in the key of Cm (I think!; not good at that kind of thing, actually). I'm working with a local union of musicians to get it performed and recorded all legitimate-like in the next few months, which I'm incredibly ecstatic about. [ Full entry ] Oct 11, 2012 VexFlow TabDiv - Easy Musical Staves Via Code Some really cool guy who does audio programming (among other things, I presume?) that goes by the moniker 0xFE made this really sweet musical notation API called VexFlow. By using a text-based language called VexTab, you can make graphical music staves without needing images! [ Full entry ] Sep 19, 2012 Programming! So, it's been a looooooong time since I did any personal dev stuff. I used to spend a lot of time on web apps, making my own blogs and music database systems and the like. Somewhere down the line I just kind of...completely lost interest in maintaining any of it, let alone making new stuff. So I dropped it all. [ Full entry ] « Prev 1 2 3 4 5 Next »"},{"title":"Home","url":"/page4/","tags":[],"body":"Oct 25, 2011 I Don't Say Anything to C# Regions, Actually, Because They're Inanimate Constructs I do C# programming for my job. Yesterday, I did a search for something relating to the #region construct, which Visual Studio uses for code-folding organization. I found this article where an emphatic programmer slammed their use and essentially publicly shamed people for using them. His is an extreme position and an extreme headline, both which garner attention (it got mine). [ Full entry ] Jun 24, 2011 My First Project in Ruby on Rails Deep within the myriad web tutorials, eBooks, and tinkering/spelunking of others' projects on and with Ruby and Rails that I've penetrated with my curiosity comes an official announcement: I've embarked on my first, really real Ruby on Rails project. [ Full entry ] Feb 4, 2011 Sharing is the Point Over the course of my history of computer programming (which stretches from the simplest markup language to full-on compiled languages), I've tried out a lot of things. When my family got its first personal computer, an AST rocking a 100MHz Pentium 1 processor and Windows 3.1 (MPC level 2, baby!), it came with QBASIC alongside its foundational copy of DOS 6. I remember playing Gorillas on it, later marveling at the source code, not really understanding how it all worked. [ Full entry ] Jan 28, 2011 Lessons Remembered from Bad Code You know it when you see it: bad code. It's not necessarily code that doesn't work (but it often is). Bad code is hard to parse, has needless complexity, and doesn't take advantage of the language's constructs for making your code easy to follow, edit, augment, and fix. We all have probably been guilty of producing bad code, either through ignorance or laziness. However, it's always something that should be avoided, if possible. [ Full entry ] Jan 26, 2011 I'm on Github! As evidenced by the subject, I'm on Github. [ Full entry ] Jan 18, 2011 Learning to Git it Right I recently completed (more or less) the Git Immersion tutorial by Jim Weirich, which walks you through the basics and intermediates of Git, the popular version control system. [ Full entry ] Jan 12, 2011 Redmine Upgrade Woes (With a Happy Ending) Redmine is a great project management web application written using the Ruby on Rails framework. I've been using it to help myself organize all of the many coding (and recently music) projects I work on. [ Full entry ] Jan 11, 2011 The Man Cave Jam Mini-Site While I have one main, official musical collaboration under my belt (that of Pure Yellow Colour), I have met up with other musicians many times to do what we improvisers like to call \"jamming\". Break out some instruments and start playing. Sometimes there's a plan or some notes or words, but often it's just one person starting to play something while the others try to join in. It's a dance between a group of musicians that I can actually perform. [ Full entry ] Jan 6, 2011 Road to Ruby, The (Real) Beginning Despite being first introduced to Ruby via working on More Things Need To, I haven't really gone full-on into Ruby-learning mode until now. I believe I've made some small inroads toward getting to know it better in the past few days, though. [ Full entry ] Jan 4, 2011 More Blog Posts About More Things Need To Need To Be Made A webplace space originally launched in February 2009, More Things Need To is a simple site. Much like Texts From Last Night or Bash.org, it's a place where anyone can submit short humorous blurbs (the former being supposed funny texts, the latter being supposed funny chat logs). MTNT's particular slant is that the blurb needs to be in the form \"More X need(s) to Y\", which is the snowclone-like template of a joke that a friend and I have been using for many years. Eventually the idea to make our shared comedy a website so that we could keep track of them, and furthermore allow others to read them and contribute their own, came to fruition. [ Full entry ] « Prev 1 2 3 4 5 Next »"},{"title":"Home","url":"/page5/","tags":[],"body":"Dec 2, 2010 Just One Password Needed It had been suggested that I use 1Password a while ago. Since I was already used to using browser-based user/pass management, the thought of purchasing something to input them all over again was discouraging to say the least. However, due to the good nature of a friend, I was gifted a Mac license of 1Password recently. The interface is slick as hell, and I found that it did a lot more than just give you a notepad to put passwords. [ Full entry ] Oct 27, 2010 The Judgement of Google I have a very real issue with judgement. In what may seem like a twisted form of narcissism, I often feel people are judging me, be it consciously or unconsciously. This causes me to not do certain things, or to at least put them off or complain a lot while I'm doing them. Now, we all judge. We judge all the time. It's how we navigate our world, constantly evaluating properties and conditions so we can make efficient and productive paths towards our goals. So when I talk about feeling judged all the time, it's significant only in that it adversely affects my behavior and mood. [ Full entry ] Oct 16, 2010 WkHTMLtoPDF, or Why I Hate Building From Source I like using technology to simplify things. Well, that's being rather prudent. I like technology because it pays my way through life, really. But to be more specific I like it when there's some cool tool (especially when it's free) that I can easily download and use to make something more awesome or make a long process more speedy. [ Full entry ] Oct 12, 2010 Coding the Night Away Despite getting caught up in Minecraft for most of the night, I was able to get in some coding tonight. [ Full entry ] « Prev 1 2 3 4 5 Next »"},{"title":"","url":"/README.md","tags":[],"body":"# michaelchadwick.github.io [Jekyll](http://jekyllrb.com) source for my code/audio development blog: [Codana.me](http://codana.me). Contains posts, projects, and contact information."},{"title":"Coding the Night Away","url":"/2010/10/12/coding-the-night-away/","tags":["webdev","configuration"],"body":"Despite getting caught up in Minecraft for most of the night, I was able to get in some coding tonight. By that, of course, I mean coding setup. What happens is that I don't code for a while and all my local versions of sites I work on atrophy. They differ from the live sites because over time I go and change the live sites directly because I'm too lazy to wait until I get home and do it right, with VCS and all. Well, that's gonna stop now. I got all my main sites wired up with Git, set up remote repos for each of them, and pushed at least an initial commit. At least things are organized like they should be now. All I have to do is actually try to program for a change. That always seems difficult to actually start doing once you haven't in a long time."},{"title":"WkHTMLtoPDF, or Why I Hate Building From Source","url":"/2010/10/16/wkhtmltopdf-or-why-i-hate-building-from-source/","tags":["cakephp","coding","wkhtmltopdf","rant","webdev","pdf","shell","cli","source"],"body":"I like using technology to simplify things. Well, that's being rather prudent. I like technology because it pays my way through life, really. But to be more specific I like it when there's some cool tool (especially when it's free) that I can easily download and use to make something more awesome or make a long process more speedy. For instance, building a web page using fairly complex HTML, CSS, and JavaScript and turning it into a nice PDF for easy sharing. Now, in the past, if I wanted to accomplish this, I'd load it up in Safari and Save As...PDF. This works out pretty well, but it's a manual process, and I usually like to crop out some elements of the page to frame it a little more nicely. Recently, I discovered WkHTMLtoPDF, a C shell script which harnesses the awesome power of WebKit to funnel your web page's contents into a slick PDF. There is also a PHP wrapper available so it's just a simple function call away. This could be embedded in your website, guys. And by guys, I mean \"Mike!\". Unlike, say, a zip file, or even a do-it-all-for-you pkg installer, the way to get this script is more UNIX-y. Building things from source code, while something I first did way back in 1999 in a C programming class, is not something I've never done, it's not something I feel wholly comfortable with either. The command line and I are on speaking terms, but I often feel like a stranger in a strange land when interfacing with my computer that way. It looks waaaaay cooler to accomplish things with a flurry of typing and Return hits, but it's also very arcane and largely non-graphical. Running a command like \"./configure\" or \"make install\" erupts a cavalcade of confusing text on the screen, doing this and that, and not really making much sense, honestly. Hopefully, at the end of it, you have a working library or program you can now use, but for me I usually just end up with an error message, indicating something that takes me further down the rabbit hole of debugging or system administrating. I'm a web programmer most of the time, and compiling software is not something I do much of. My code is interpreted by a browser, always being re-read and re-processed and re-factored, all in real-time. This \"put-a-bunch-of-stuff-in-a-bowl-and-hit-bake\" is something that gives me great pause and consternation. Too many times it just leaves me with that aforementioned screen of gobbledygook, a bunch of files somewhere on my computer, and no progress. Long story short, my computer cloned a couple of git repositories, did some compiling, and it all resulted in a few arcane errors and me no closer to using this awesome script that would be sweet to use."},{"title":"The Judgement of Google","url":"/2010/10/27/the-judgement-of-google/","tags":["anxiety","judgement","webdev","bug-reporting"],"body":"I have a very real issue with judgement. In what may seem like a twisted form of narcissism, I often feel people are judging me, be it consciously or unconsciously. This causes me to not do certain things, or to at least put them off or complain a lot while I'm doing them. Now, we all judge. We judge all the time. It's how we navigate our world, constantly evaluating properties and conditions so we can make efficient and productive paths towards our goals. So when I talk about feeling judged all the time, it's significant only in that it adversely affects my behavior and mood. Judgement can be as innocuous as feeling awkward getting a haircut, which I do, but it's a powerful force nonetheless, and it happens to me a lot. One recent example is when I submitted a bug to the Chromium project (i.e. Google Chrome web browser). I found a weird bug (mentioned here) and complained to a friend about it. He encouraged me to submit a bug, because, you know, it might actually help accomplish the task of fixing it. I know this, of course, but I was reticent. Why? Judgement. To submit a bug in this fashion is to 1) admit you think something about an application is wrong in a public forum, 2) assert you know why that something is wrong, and 3) deliver this message in the proper format to a community most likely inundated with requests already. My fear is that my bug submission is potentially mis-informed and ill-described, and that to go through with submitting it is to publicly attach my name to it, potentially marking me as, at best, a noob or, at worst, an idiot. I'm not a great programmer, so why waste my time assuming I know enough to say something is wrong? The rational side of me knows most of this to be hogwash, but the irrational side has an axe. And it knows how to brandish it. I know I shouldn't care about what others think, but I'm probably never going to accept a world where that is true for me. The community before I showed up was well-established and had a thriving mass of content. The list of bugs submitted is long. My presence potentially upsets that. In addition, even throwing my judgement neurosis out the window, my contribution may just be ignored. In sum, if I go through with it I most likely will just end up with negative judgment neurosis badgering as well as the bug not getting fixed. My conclusion? Leave it be and deal with the bug until someone else with more courage and confidence discovers it and fixes it, or use a workaround. Avoidance is always easier than confrontation. In the end, I submitted the bug, but not without overanalyzing my submission for half an hour, which included asking my friend how best to word some things :-P I still doubt it will get noticed, let alone fixed, and my judgement neurosis remains unchanged. All in all, the pessimist in me considers this whole affair a fail."},{"title":"Just One Password Needed","url":"/2010/12/02/just-one-password-needed/","tags":["technology","1password","security"],"body":"It had been suggested that I use 1Password a while ago. Since I was already used to using browser-based user/pass management, the thought of purchasing something to input them all over again was discouraging to say the least. However, due to the good nature of a friend, I was gifted a Mac license of 1Password recently. The interface is slick as hell, and I found that it did a lot more than just give you a notepad to put passwords. The program is pro all the way and allows you to put in website logins, server accounts, financial information, and even identities. What's even better is that it is now cross-platform, and with a little Dropbox magic, both Mac and Windows are synched. Change a password on my MacBook tonight, go to work tomorrow and Windows has the same thing. The icing is that both platforms have working Google Chrome plugins (my browser of choice) so that you just click a button and it enters your info into the website. The reason it's called 1Password is that now that I have all my info inputted correctly (which took a whole day) all I need to know is ONE PASSWORD. I made a crazy password as a master and that's it. Start up the program (or access it via plugin), enter that skeleton key, and you're in. What one should now do is generate a bunch of new passwords that are high quality and unique (unlike my crappy ones that I repeat all over the place), because you don't need to remember them (which is why they end up being crappy and repeated). As long as you remember the master password, all the subsequent passwords can be as ridiculous as you want, which makes you more secure overall. This is something I didn't realize until today when it was pointed out, and it really does change the way I think about creating passwords forever. The only caveat is that the Windows version is obviously a port, design-wise, since the Mac version is so...Mac: in other words, it looks sweet as hell. Microsoft's side looks much less appealing, but thankfully you won't be looking at it much since you'll basically just be interacting with it via browser plugin. Initial investment is significant, so be prepared to put some time in to get the program full of personal information goodness. On the other hand, you could just fill it in as you use sites, slowly filling the holes. Either way, I highly recommend it. Agile Web Solutions is the developer, so check it out."},{"title":"More Blog Posts About More Things Need To Need To Be Made","url":"/2011/01/04/more-blog-posts-about-more-things-need-to-need-to-be-made/","tags":["iphone","ios","morethingsneed.to","mtnt","rails","ruby","webdev"],"body":"A webplace space originally launched in February 2009, More Things Need To is a simple site. Much like Texts From Last Night or Bash.org, it's a place where anyone can submit short humorous blurbs (the former being supposed funny texts, the latter being supposed funny chat logs). MTNT's particular slant is that the blurb needs to be in the form \"More X need(s) to Y\", which is the snowclone-like template of a joke that a friend and I have been using for many years. Eventually the idea to make our shared comedy a website so that we could keep track of them, and furthermore allow others to read them and contribute their own, came to fruition. My friend, who is more acquainted with Ruby on Rails, decided to make the site with it as its server side back-end. The front-end design has been a more cooperative effort. A mobile version specifically targeting iPhones and iPods has been largely my effort. As he creates features or edits things, I sort of translate it to the small screen. Together MTNT has become a pretty solid little web app that we've enjoyed tinkering with for almost a year now. MOBILE MTNT Working on the mobile version has been fun as I find it enjoyable to take a more complicated layout and try to \"minify\" it for the restricted viewport of a phone. While I usually start a fresh desktop project off with a simple design, making it increasingly more complex as features are created, constructing a mobile version of a site goes in the other direction. Start with a complex site and begin increasingly stripping things until the app is down to its core components. Streamlined and svelte, much like the phone it's probably being viewed on nowadays. I'd like to take the idea a step further and make a free iPhone app out of MTNT, as well. There isn't a heck of a lot of advantage to \"appifying\" the site, but that actually is an advantage in accomplishing said task: it shouldn't be too much translation, and it will be a good first iPhone app exercise. The first step in making it work is to create a public API that it can call, but that's currently on the backburner. RECENT MTNT CHANGES Some of the more recent additions to the site are a view of all users with their respective number of entries/votes/comments they've made, as well as an entry search function. They've been on the desktop version of the site for about a month, but the mobile version was just amended to use them last night. The buttons used when paging through entries were also updated to look more mobile-like and be more consistent with the form buttons already existing. GETTING BETTER ACQUAINTED WITH RUBY The Ruby back end of MTNT is still a bit of a mystery to me as I've mainly used ASP.NET and PHP. As I've updated my part of the site bits of Ruby here and there have surely entered my brain, but it has yet to coalesce into clear understanding. The syntax and flow of creating a website in Ruby still hasn't clicked with me, but I'm taking steps to overcome this: Immediately: Completing the Ruby Koans Imminently: Redoing nebyooweb.com in Rails 3 Imminently: Attending a Ruby user conference/meetup Eventually: Creating a Ruby gem (maybe) Learning a whole new language, as well as a framework, is difficult. However, I've heard from multiple people how Ruby just \"feels right\" and once you've gotten over the learning curve using it is a pleasure. I hope this comes to pass."},{"title":"Road to Ruby, The (Real) Beginning","url":"/2011/01/06/road-to-ruby-the-real-beginning/","tags":["ruby","meetup","webdev"],"body":"Despite being first introduced to Ruby via working on More Things Need To, I haven't really gone full-on into Ruby-learning mode until now. I believe I've made some small inroads toward getting to know it better in the past few days, though. Some of the accomplishments I've made as of late: Successfully finished a coding exercise dealing with basic class relationships and Ruby built-in methods set forth by my coding friend Wrote a small script to reverse a list of strings for the Lists page here on my blog Gone through a tutorial or two or three Going to a local Ruby meetup (tonight!) Grasping the concepts of Ruby is mostly reaffirming basic programming ideals only with different syntax, so it's going well. Using it with the web framework Rails will be more difficult, but is probably the best next step. My goal is to have created a Rails web app by the end of the month. This will help strengthen my ailing database skills, which have needed some sprucing up after several years of mainly front-end work."},{"title":"The Man Cave Jam Mini-Site","url":"/2011/01/11/the-man-cave-jam-mini-site/","tags":["1140","music","grid-system","mcj","webdev"],"body":"While I have one main, official musical collaboration under my belt (that of Pure Yellow Colour), I have met up with other musicians many times to do what we improvisers like to call \"jamming\". Break out some instruments and start playing. Sometimes there's a plan or some notes or words, but often it's just one person starting to play something while the others try to join in. It's a dance between a group of musicians that I can actually perform. Occasionally, the jam session gets recorded. Rawly, of course, as we rarely had more than a single microphone sitting in the middle of a room trying to pick everyone up. Mixing and mastering doesn't happen here. Just pure, unaltered, sometimes downright cacophonous audio. Some of the madness over the past 6 or so years is now up on a neat little mini-site I just put up. Check out the Man Cave Jam, if you wish. As far as new web technology, I upgraded the time-honored JW Player to 5.4, skinned it, and added all of a band's particular songs to a playlist. The whole site is done in the 1140 CSS Grid framework. This 12-column layout allows for a really flexible design that looks great on a 1280x800 MacBook screen, all the way down to an iPhone, carefully compressing space until it transforms from a desktop app to a mobile one right before your eyes. I'm still trying to get the kinks out of JW Player's HTML5 support, so for now iDevices won't get the sweet Flash player. You can still click on the \"Download files\" button next to each band and navigate some exciting default Apache file system hierarchies to get the files."},{"title":"Redmine Upgrade Woes (With a Happy Ending)","url":"/2011/01/12/redmine-upgrade-fail/","tags":["redmine","technology","ruby","rails","debugging","upgrading"],"body":"Redmine is a great project management web application written using the Ruby on Rails framework. I've been using it to help myself organize all of the many coding (and recently music) projects I work on. For some reason, when I initially installed it on my Site 5 host, I grabbed some non-stable release (1.0.2.devel.4232) to begin my experience with Redmine. Everything works fine, so it doesn't really matter, but I've always thought I should install a more stable version. It would have bug fixes and new features, so why not? A few weeks ago I grabbed the 1.0.5 release and tried upgrading, only to be met by an issue with the i18n Ruby gem. No matter how many times I installed it, running one of the upgrade steps helpfully reminded me I did not have it. I tried some general troubleshooting (reinstalling gem, checking Google, etc.), but couldn't get it working. I gave up and went back to my dev release, which still happily worked. Recently, Redmine's development blog announced their 1.1.0 release, so I downloaded it, uploaded it to my server, and went through all of the upgrade steps again. Once I got to the end, I tried running the command that plagued me before, reaching the same result. Some more research led me to do some .bash_profile updates and some app/config/environment additions. Finally, the gem was recognized and I was on my way. Bringing up my browser and typing in my brand-spankin' new subdomain into Google Chrome was surely going to get me back to work with actually using Redmine instead of just installing it. Right? Not yet. My app instead spat out a message explaining that there was a missing file. I found a fix. Now my app just says it can't start at all. Checking the Redmine app logs show nothing. Checking the main server Apache error logs was not helpful. Grrrrrr. UPDATE As usual, a friend more wise in these ways helped me out. I had been neglecting to turn on Passenger support in an .htaccess file, so the server was using another technology to try and load Redmine. Once I added the right lines, it sprang to life. I just checked everything and all my data appears to be intact. Back to managing projects!"},{"title":"Learning to Git it Right","url":"/2011/01/18/learning-to-git-it-right/","tags":["git","tutorials","webdev"],"body":"I recently completed (more or less) the Git Immersion tutorial by Jim Weirich, which walks you through the basics and intermediates of Git, the popular version control system. While I've known about Git for a while, ever since More Things Need To, I didn't start using it much until I bit the bullet and used it on my own sites. My workflow was disorganized and kinda heinous, but now I'm pretty good at using it personally (the next step is to use it at work!). Breaking down my workflow into manageable chunks that can then be referred back to (and used to recover when you make mistakes that blow things up) is really useful. Coding locally on one machine, pushing to a remote repository, and then pulling all of that code down to a local repository on a different machine is amazing. Just through using it (and making mistakes) and reading stuff like Pro Git, I was able to get by. The Git Immersion tutorial, however, once followed, made me feel quite a bit more knowledgeable about several parts of Git. The step-by-step approach of explaining and giving clear instructions on what to type and what you should expect to see works for me quite well. The more complex branching issues that arise from multiple participants in one repository are still a little scary, but one- and two-person programming situations seem pretty reasonable for now."},{"title":"I'm on Github!","url":"/2011/01/26/im-on-github/","tags":["github","jquery-newslist","jquery","javascript","webdev"],"body":"As evidenced by the subject, I'm on Github. A year-or-so ago I created my very first jQuery plugin. It was total crap sauce. Then, I created my second jQuery plugin and it's kind of useful! It's called News List and it takes a simple little HTML structure and turns it into an auto-cycling slideshow of items. You see these things on the top of any kind of news site all the time, and they're probably a lot more complicated and pretty than mine. But they were not created by me, and this one is! Your eyes and minds can feast on it here."},{"title":"Lessons Remembered from Bad Code","url":"/2011/01/28/lessons-remembered-from-bad-code/","tags":["rant","webdev"],"body":"You know it when you see it: bad code. It's not necessarily code that doesn't work (but it often is). Bad code is hard to parse, has needless complexity, and doesn't take advantage of the language's constructs for making your code easy to follow, edit, augment, and fix. We all have probably been guilty of producing bad code, either through ignorance or laziness. However, it's always something that should be avoided, if possible. Relating mostly to web development, here is a short list I've compiled off the top of my head: using old layout design patterns (e.g. ) using instead of not using master page/view layouts in-line Javascript or CSS mixing tons of client-side code with server-side code in the same file not using external code files for functions redefining the same functions in multiple files hard-coding presentation markup in compiled classes creating all-new pages for a short amount of information label nomenclature inconsistency (i.e. calling it a \"bar\" here, but a \"foo\" there) using deprecated elements or attributes rendering basic functions broken if something the user can disable is turned off (i.e. Javascript) Nothing here is revolutionary or unique and can be seen from the simplest script to the most complex enterprise application. Still, STOP IT OK GUYS."},{"title":"Sharing is the Point","url":"/2011/02/04/sharing-is-the-point/","tags":["sharepoint","webdev"],"body":"Over the course of my history of computer programming (which stretches from the simplest markup language to full-on compiled languages), I've tried out a lot of things. When my family got its first personal computer, an AST rocking a 100MHz Pentium 1 processor and Windows 3.1 (MPC level 2, baby!), it came with QBASIC alongside its foundational copy of DOS 6. I remember playing Gorillas on it, later marveling at the source code, not really understanding how it all worked. School had actually introduced me to HyperCard as part of a 7th grade computer literacy course before my run-in with QBASIC, but that was a higher-level language and didn't get me into the nitty gritty of code, even though it did spark my interest in what would later become HTML. Near the end of high school I took an intro to C programming course, compiling source with gcc, and uploading my programs to a UNIX home directory. In college, I took a class on Java. And that was about it for direct school influence. Thus, all the rest of my programming experience came via either work or personal projects. Using our family's AST I built my first rudimentary website, lost to the annals of history. Many, many, many revisions later, we have what is largely nebyoolae.com and nebyooweb.com. Basic HTML was later joined with CSS. JavaScript, which became jQuery, was added in next, along with a MySQL database and PHP. The CakePHP framework now encapsulates both of their current forms. My Ruby and Ruby on Rails knowledge is still in its infancy, but it's growing. In the last 15 years I've also used several scripting languages, as well as prettified text using various markup languages. I still only speak English with any kind of fluency, though. At work I picked up on ASP and even some Perl. More recently, I have picked up ASP.NET, C#, and today's actual topic, Sharepoint. OH RIGHT, SHAREPOINT WAS THE TOPIC Microsoft's Windows Sharepoint Services (WSS) is basically a layer that sits on top of ASP.NET, providing additional functionality. It could be described as a sort of Content Management System (CMS) as it allows people to view, add, edit, and remove content like documents, pictures, and text, but it can also be shared with others, all in one central web application. Before my current job, I'd heard of Sharepoint, but never used it. Now, I've installed it, configured it, branded it, and even begun to start customizing it. Unfortunately, Sharepoint only runs on Windows Server, and not client OSes like Windows 7. This makes developing for it slightly more of a hassle, especially if your network connection is slow or the remote server is slow to react to changes. This problem seemed to have no recourse until I read a 3 year-old article. Apparently, using some third-party trickery, you can sidestep the server OS requirement and do the impossible. Using additional guidance from here, I finally got SP installed and can get to Central Admin. This can make creating custom Web Parts easier since you can test them locally, removing the need to copy them to a server to see if they work. However, I haven't actually been able to successfully connect to a local web application created through Sharepoint's CA. I give my user account full control, but when I input my credentials it refuses to accept them. And that's only on Internet Explorer 8. Google Chrome has since started simply crashing when I try to access the web app, choking on something unknown. Sigh. It's frustrating to have gotten this far only to be stuck. Computing is often riddled with issues like this, and it's really easy to get dejected and just give up. I'll keep trying to fix the problem, but for now it's back to Post-Build Server Copying for development."},{"title":"My First Project in Ruby on Rails","url":"/2011/06/24/my-first-project-in-ruby-on-rails/","tags":["git","ruby","rails","announcement","pureyellow.net","webdev"],"body":"Deep within the myriad web tutorials, eBooks, and tinkering/spelunking of others' projects on and with Ruby and Rails that I've penetrated with my curiosity comes an official announcement: I've embarked on my first, really real Ruby on Rails project. Check out the following link. Although you can't necessarily tell, this site is not built on a framework. It uses PHP for some light dynamic content, but there's no databases or tables. The newsfeed is just one long HTML file, for Petra's sake! The closest it comes to reusable coding practice is having a bunch of include files. Also, there is nary a touch of HTML5 or CSS3 modern goodness to see. Convention over configuration? DRY? Nope, son. The site as it stands is old-school web development. I aim to change that. That brings us to PYC on Rails, which will be a Rails 3 web app with a database and models and controllers and drop shadows that aren't brought to you in image form. It's gonna be all versioned nicely in Git and deployed using Capistrano. It's gonna use Rubygems. It's gonna be available on Github once it's public so anyone can see how it was made and pick it apart. Obviously, it's not gonna be perfect, because it's my first site and I'm bound to do stupid beginner things. However, when it's done, it's gonna be a great jumping off point from the, uh, zeroth site I, um, do(n't?) have. Confidence++ when it's done, which will hopefully lead to doing some awesome stuff on Morethingsneed.to once I've got a better idea how RoR works. Web development in my free time? I'm back."},{"title":"I Don't Say Anything to C# Regions, Actually, Because They're Inanimate Constructs","url":"/2011/10/25/i-dont-say-anything-to-c-regions-actually-because-theyre-inanimate-constructs/","tags":["c#","csharp","visual-studio"],"body":"I do C# programming for my job. Yesterday, I did a search for something relating to the #region construct, which Visual Studio uses for code-folding organization. I found this article where an emphatic programmer slammed their use and essentially publicly shamed people for using them. His is an extreme position and an extreme headline, both which garner attention (it got mine). Extreme positions, while useful in providing a clear, unadulterated opinion, just never seem useful in the vacuum of the post, speech, or article they reside in. They can only be understood in the greater context of the idea they describe. Thus, people commenting and saying \"Man, your opinion is extreme and I don't like it\" or \"Man, your opinion is extreme, and I like it\" is also not useful to me, because it's all extreme commenting with little to no nuance. The author later admitted to recently having a very negative experience with #regions and that it may have influenced his extreme article. His admission is pretty predictable, as I find most extreme positions coming from an extremely one-sided environment that doesn't easily allow for opinions that differ. Basically, he had to deal with some overwhelming use of the programming construct and it screwed with his day, and then he wrote a scathing screed against them. He doesn't use #regions and his code is brilliant, so others who \"abuse\" them must be wrong. I don't believe using an IDE's organizational tool to help you code is wrong or bad. The abuse of anything is always an issue and checking yourself before you wreck yourself is always useful. In other words, an article stating that you should try not to overuse an element that can lead to difficulty in understanding something later for both you and someone else would probably be more constructive. It would also probably just be disregarded by people because it's not a strong, extreme position. It's misconstrued as flaky or wishy-washy. A headline that says \"Use C# Regions Sparingly, Wisely\" is not as attention-grabbing as \"C# REGIONS ARE ONLY USED BY JERKS\", and it never will be. So it goes."},{"title":"Programming!","url":"/2012/09/19/programming/","tags":["actionscript","codaname","design","django","html","ios","javascript","jquery","nebyoolae.com","python","ruby","rails","adobe","air","announcement","chrome","css","database","flash","webdev","website"],"body":"So, it's been a looooooong time since I did any personal dev stuff. I used to spend a lot of time on web apps, making my own blogs and music database systems and the like. Somewhere down the line I just kind of...completely lost interest in maintaining any of it, let alone making new stuff. So I dropped it all. My main website, nebyoolae.com, just links to my Bandcamp, because, well, they do it better than me! It also got me to prune my collection of music from \"everything\" to \"the things worth sharing\". My web dev marketing site, nebyooweb.com, hasn't been updated in a long time. In fact, I'm actually really horrible at and uninterested in marketing myself (and I got a job already), so its purpose in existing is negligible at best right now. All my other little mini-projects and subdomains were fun to play around with at the time, but don't need any attention anymore. In the end, I just kind of gave up on trying and focused on the .NET stuff I do at work, but not doing anything in my spare time. However! I'm starting anew. My deleted Github account has been resurrected and changed to my actual name. It's probably a good thing to separate my musical/general Internet persona of \"nebyoolae\" from my professional, real-name persona, anyway. Anything I create will eventually go on here, for better or worse. Part of getting better is admitting your mistakes and defeats, and seeing yourself grow. This is really hard for me, because I'd much rather just hide all my crappy code and/or give up. It's really difficult to admit I'm not good and accept help in order to get better. Also, doing things other people have done a million times before is OK, because you need to have the experience of doing it yourself. That all being said, here is a list of things I'm going to try out (eventually): Simple blog in Rails jQuery plugin design Python scripting (and maybe django for a simple blog) HTML5/CSS3/responsive design Flash Actionscript (simple game) Adobe Air (Twitter client?) iOS app Chrome extension Database design (this is something I often struggle with) Simple Ruby command line script That's a big list, I know. I don't pretend to guarantee I'll get to all of it, but it's what I'm currently interested in. Gotta start with some ideas. As mentioned previously, all the code will be open-sourced on Github, but I will try to blog about it at codana.me, my new coding site (which will most likely be the simple blog in Rails). It's barren now, but soon it will had links to stuff. Yes...links."},{"title":"VexFlow TabDiv - Easy Musical Staves Via Code","url":"/2012/10/11/vexflow-tabdiv-easy-musical-staves/","tags":["javascript","tabdiv","vexflow","vextab","music"],"body":"Some really cool guy who does audio programming (among other things, I presume?) that goes by the moniker 0xFE made this really sweet musical notation API called VexFlow. By using a text-based language called VexTab, you can make graphical music staves without needing images! Why, look below here (make sure you're on my site in order to see the magic happen) and you'll see one: tabstave notes 3-5/6 2-3-5/5 2-4-5/4 The C major scale You just use text to make the awesomeness up above, telling VexFlow what notes you want to see, and how they should be displayed. In short, I believe I might start using this to illustrate some musical ideas I have coming up. So that this post actually has some original musical content, I'll leave the first 4 bars of Beloved, which is an original piece I wrote for Stringing You Along. tabstave notes :8 2/5 4/4 :q 4/3 :h 2v/3 | notes :8 (2/2.2/3) (3/2.4/3) (2/2.2/3) 4/3 2/3 :q 4v/3 :8 2h4p2p0/3 tabstave notes :8 2/5 4/4 :q 4/3 :h 2v/3 | notes :8 (2/3.2/2.5/1) :q 2/1 :q 3/2 :16 2h3p2/2 :8 4/3 2/3 First four bars of 'Beloved' The spacing and all is a little wonky, but it gets the general gist across. Hell, maybe I'll even fork it and improve it someday. Knowing I at least want to focus on musical programming makes it easier to swallow this whole return to personal development."},{"title":"Dumeh, Musically","url":"/2012/12/03/dumeh-musically/","tags":["vextab","dumeh","music","webdev"],"body":"There's this little project I've been working on for about, oh, a decade now. I call it \"Dumeh\". It's a modern (meaning it's probably a little too pop-ish, has a drumkit, and I wrote it in the 2000s) symphony in three parts (fast-slow-fast), and is in the key of Cm (I think!; not good at that kind of thing, actually). I'm working with a local union of musicians to get it performed and recorded all legitimate-like in the next few months, which I'm incredibly ecstatic about. The whole shebang is 7-8 minutes long and includes all the usual orchestra members you'd expect, but the very intro is played by a single instrument. Here's the main intro theme, as originally written for guitar: tabstave notes :8 (3/5.0/3.1/2) (3/5.0/3.3/2) | :q (3/5.0/3.4/2) 3h4p3/2 3/2 0/3 | :h (3/5.3/4.0/3.3/2) 3s1/2 0/3 tabstave notes :h (1/4.0/3.1/2) :q 1/2 0/3 1/4 | :h (1/5.0/4.0/3)V | (3/5.1/4.0/3) 1/4 0/3 (1/6.0/5.0/4) 0/5 0/4 (3/6.1/5.0/4) tabstave notes :q (3/5.1/4.0/3) :8 (1/6.0/5.0/4) (3/6.1/5.0/4) 3/6 1/5 0/4 | 5/4 0/3 0/2 3/4 0/3 0/2 1/4 0/3 0/2 0/3 tabstave notes :w (1/4.0/3.3/2)V The intro to 'Dumeh' The timing is not well-represented, but you sort of get...something out of the above, right? This may be my favorite creation of all time. It's not musically insane or anything, but the rhythm has a nice flow, and chords are a bit unsettling, yet still tasty. The piano version of this, which is what the finished product will use, is more complex, but the gist is the same. Bringing full-on creation to a riff I came up with over 10 years ago...well, it's gonna be a dream come true."},{"title":"Railsbridge San Diego","url":"/2013/03/13/railsbridge-san-diego/","tags":["git","ruby","sql","rails","railsbridge","volunteering","women"],"body":"Last weekend I did something I'd never done before: helped out at a programming workshop. My wife can say the same, cuz she came along and not only helped out, but was an excellent programming \"student\". I was really jazzed that she was interested and actually had fun. Railsbridge is \"an organization that works to increase diversity in tech by putting on a variety of awesome free events.\" Basically, it's a collective started by a group of women from San Francisco who want to increase the number of women in tech. By their statistics, the percentage of people in the SF Ruby community is 98% male. Whoa. One way to get more females exposed to and interested in programming is by holding free workshops where they can come and learn in an inviting environment, no matter the skill level. I know the organizer of the recent SD workshop and before it occurred he asked if I knew any Ruby on Rails and if I would be interested in volunteering. I've dabbled with both Ruby and Rails in the past (doing many tutorials and even getting through the koans), but neither feel very knowledgeable or experienced. However, a great way to learn is to try to teach, so I reluctantly accepted his offer. In the weeks leading up to the event, I went over all the \"decks\" and installed the whole dev stack on both a Mac and Windows system (and even a Linux VM I made during Installfest :P). Going over the basics of getting your development environment squared away with Robyn before the event was a great help. I even got another TotalTerminal convert out of it. Once the weekend was upon me, I made my way to Co-Merge's shared workspace where the event was taking place, and I actually did teach! Between general tech support on a Friday Installfest day (where everyone gets together informally to get Ruby, Rails, Git, and SQLite installed on their machine) and actually instructing half of a class on the actual workshop day, it was a really good experience. I rode the line of competence the whole time, sort of knowing what I was talking about, but not being the expert I know I probably could be if I ever got past the \"needs a tutorial/reference\" stage. \"Those who can't do, teach\" is too extreme a philosophy to be true (they are not mutually exclusive), but sometimes I wonder if I'd be better off just teaching the basics of programming to people instead of actually trying to become an intermediate/advanced coder in any language. I can be fairly extroverted and affable, even in front of strangers, if I really want to be. Fighting the anxiety and self-judgment is always going to be tough, but it can be managed. Hopefully, the aim to have this workshop every 3-6 months comes true, and I can help out again. It went well, I didn't embarrass myself, and I met several people in the Ruby community that, if I ever seriously get back into personal development, could be good networking contacts. To that end, both Robyn and I are going to try working on a web application together soon, using all the tools and knowledge gleaned from the workshop. I'd call this all a success."},{"title":"Installing Windows on Your Mac When You Have No Internal Optical Drive","url":"/2013/05/23/installing-windows-on-your-mac-when-you-have-no-internal-optical-drive/","tags":["apple","osx","bootcamp","how-to","install","windows","windows-7"],"body":"We have many computers at home. Between my wife and I, there're plenty of ways to surf the Internet, watch Netflix, and play computer games. However, not all computers are equal in power, and there're reasons to use one over another. This brings me to an on-and-off again struggle I've recently gone through, but ultimately succeeded at!, to put Windows on my 2011-era MacBook Pro. THE GOLDEN AGE Back in the late 2000s, I was rocking a 2007-era white MacBook. I play games on my iPhone, iPad, and Mac. Apple has garnered more developer love over the years, so many more games come to OS X than they used to, but there are still plenty of AAA devs who only target (or have historically targeted) Windows, and that's why it's still nice to have a decently-beefy PC around. Using Boot Camp to get Windows 7 on the MacBook was pretty straightforward, and there was no real trouble. When I went to put it on my MBP, once again the process was easy, and life was good. My Mac, now with a proper 3D graphics card, was easily the most powerful Windows-running machine in our house. But last year, when I finally decided to make the switch from the plain old stock slow-HDD+optical-drive to the screamin' fast-SSD+extra-faster-HDD, Apple put on the brakes when I tried to recreate my sweet setup of OS X and Windows on one portable dream machine. BOOTING STUNTED For whatever reason, I could neither create a Windows 7 USB install thumb drive that would actually  boot, nor could I create a Windows 7 DVD install disc that would actually boot. I tried multiple ISOs of Windows 7, multiple discs and disc drives, and multiple processes to create the aforementioned USB thumb drive (1. Windows 7 USB/DVD install disk creator utility, 2. Boot Camp assistant, and 3. diskpart on the command line). Getting Mountain Lion to even see the USB drive at boot required checking out both rEFIt and rEFInd, some custom boot loaders freely available on the Internet. They definitely got my MBP to see a USB drive on boot, but booting off of them kept resulting in the same \"Non-system disk\"-type errors. I was stonewalled. DVDs met a similar fate, as the same error would appear, forcing me, yet again, to reboot my Mac in frustration. I almost gave up. A LIGHT APPEARS Real progress finally started to be made once we brought in help from my wife's iMac. Our first attempt to install Boot Camp across Firewire to my Mac in target disk mode failed as Windows flat-out refuses to install to an external drive. I thought the operation was sunk until both of our brains locked into unison and we more or less simultaneously said out loud \"we should install Boot Camp on the iMac and transfer it to your machine!\". Now, I'd never done anything like that, and it seemed like a big hassle, but it actually worked! It took a third-party utility named WinClone to do the heavy lifting, which had been mentioned on several articles as we Googled ways to fix my problem, but it totally worked. (Aside: During this whole process I learned how much Boot Camp Assistant is really just a big software wizard, and nothing it does can't easily be done outside of it. It does three things: 1) Create a Windows install disk (just use Disk Utility to burn an ISO), 2) Download Windows support files (can be gotten from MS and copied to your install disk), and 3) Partition your hard drive for Boot Camp (use Disk Utility to make a FAT partition for Windows). What it does is nice your first time around, but after the 5th or 6th attempt at this, I decided to just eschew its helpfulness altogether.) THE PROCESS In sum, the process to actually get Windows on my 2011-era MacBook with an SSD+HDD (and no internal optical drive) setup was thusly: 1) Use Disk Utility to create a FAT partition on a separate, \"helper\" Mac 2) Restart helper Mac and boot from Windows 7 DVD install disc 3) Format FAT partition in Windows install to NTFS 4) Install Windows 7 (which required one reboot back into Windows to finish it, and then another reboot back to Mac) 5) Install and use WinClone to clone NTFS partition to .winclone file 6) Move .winclone file to target Mac 7) Use Disk Utility to create a FAT partition on target Mac 8) Install and use WinClone on target Mac to restore .winclone file to FAT partition 9) Restart target Mac and boot into newly restored Windows partition 10) Use Windows! THE TAKEAWAY Apple really doesn't want you to take out your optical drive. Sure, you can and I actually don't miss it at all, but as you can tell it complicates things. The helper Mac was set up like my MBP used to be and it had no trouble installing Windows, so obviously my post-purchase upgrade angered my machine. You'd think in the 2010s all operating systems would be able to deal with these kinds of hardware configurations, but I guess not. Regardless, the method was more complicated than I would've thought it would be when I started this whole process, but I couldn't think of any other way to go about it. I just hope this helps out someone else who has been beating their head against the wall, staring at error messages and wondering what's going on."},{"title":"Logic Pro X: A Cursory Review","url":"/2013/09/25/logic-pro-x-a-cursory-review/","tags":["audio","logic","logicprox","review"],"body":"The new Logic Pro X is pretty awesome. A totally new coat of paint and a load of new features means that it takes some time to get used to it. I dig the new interface a lot, but I'm still learning its new quirks. Disappearing plugins and UI oddities keep me from being 100% satisfied with it, but I'm getting there. I had several projects going before it came out, and I wasn't really keen on trying to get them to work in the new version before I had a chance to really run it through the ringer. Thus, the screenshot is for a brand-new song I've been tracking for a while now. It will be the soundtrack to a video I'm going to make about a recent trip to New York. The session for the song is using a lot of the new guitar amp simulation plugins, as well as the new Drummer module. I love the latter sooooo much, as it's really rather intelligent and makes for quickly laying down a beat to play over almost stupidly easy. An adjustment to each region here and there as I change my mind about the song, and everything updates in near-real time. The algorithm they use for their so-called \"Virtual Drummer\" is quite good and, if I get lazy, the generated regions may end up going into the finished project; they are that good. However, if I am not lazy about it I will just drag them into a different drumkit plugin track and all the notes magically become editable. I'm not yet sure about Summed Track Stacks, as they make for dragging regions in and out of them harder than regular tracks. It kind of makes buses more automagical, which is nice, but I'm going to have to test them out more before actually using them in a session. All in all, I'm glad I'm finally digging into the wonders of Logic Pro X, and I hope to finish up some old projects in Logic Pro 9 soon so that I can come over full-time."},{"title":"Oculus Rift","url":"/2013/12/02/oculus-rift/","tags":["demo","gaming","oculus","rift","review"],"body":"Oculus Rift! I got to try one! It pays to know people who know people who buy things like this. OCULUS THOUGHT The Rift itself is basically a huge visor thing you strap to your face. Full panoramic views await you without even moving your head, which then give way to a full-on 360 degree view completely encompassing you as your noggin begins to wander. It's pretty comfy, actually, and didn't feel too heavy or constricting. I couldn't wear my glasses (and I don't do contacts), so I had to use the \"nearsighted\" lenses that come with it, despite them not being my actual prescription. That coupled with the fairly low-res video capability of the current DevKit made things kind of fuzzy for me. Watching other people use it and move their head around was as humorous as you might think, but when you're \"inside\" it, it's a slice of crazy awesome. OCULUS APPS I played three demos: a space exploration ride where you're in a cockpit of sorts, slowly flying around space and looking at planets and info about them, a first-person rollercoaster, and a playful on-rails first-person elephant game where your head has a trunk you can swing around to hit things. The third one was definitely the most fun, mainly because of the action you can do, but imagining yourself as a large, lumbering animal, swinging its mighty appendage at random Katamari-esque objects in a weird cartoonish land helped a lot, too. The rollercoaster demo was cool, and did a good job of making you feel like you were actually on one, but I wished for the visceral \"shaking\" feeling you get while seated in the bucket chair of a real ride, the wind blowing against your face, and all that. It's a step in the right direction, though. Space exploration was nice and slow and really let you take in your surroundings whilst craning your neck around to see all the planets and stars as you woosh around them. OCULUS ROCKS My favorite part about the Oculus is definitely the immersion. I mean, obviously the idea is to immerse the user in a fully 360 degree world. With headphones on and the Rift sucking my face, this was pretty well achieved. No matter how close to a conventional screen you sit in front of, it can't compare to something like the Rift. You can look all around you and every inch of the \"inside\" world is visible. In the rollercoaster demo I was able to achieve slight nausea just by looking around as I \"moved forward\", which while being unpleasant, is kind of amazing when I was never actually moving. OCULUS SUCKS The aforementioned nausea was not great, but it really only happened in the rollercoaster demo (and I egged it on by looking around crazily while going around curves). However, I couldn't get totally past how the graphics of that demo were pretty sparse and detracted from the overall realism. The text was really hard to read in the space demo, too. In general, the resolution being low is my main complaint about the current DevKit, so I hope to check out a newer version when they improve that. Finally, the device is not crazy expensive, but still out of the reach of most people's budgets. FOR THE ROAD The Oculus Rift is 360 degree VR from the 1990s in a package usable by consumers. The graphics may be better than that of some arcade I tested this kind of thing out on 20+ years ago, but they're still not as good as I'd like them to be. Still, what is available now is totally worth experiencing because it's a blast and a unique ride."},{"title":"IGDA Meetup","url":"/2014/03/10/igda-meetup/","tags":["coding","development","gamejam","miscellaneous","barcade","gaming","igda","meetup","social"],"body":"I'm not a game developer, but I like to think I could be one in some way, so a few weeks ago I attended an IGDA meetup in San Diego. It was the first official one in many months (efforts have been in effect to get the local chapter humming again). A nearby \"barcade\" -- think small bar plus old coin-op games surrounding the tiny space -- hosted and it was a blast. As an introvert who cemented their friend group a while ago, and I finished schoolin' a while back, I don't really meet new people much anymore. Going to a meetup at a bar on a whim is a good way to get back into that mode, and meet new people I did. Besides the expected array of indie game developers packed into a place with music blaring and old video games doing their thing, there was also a large contingent of people from a nearby college. In effect, the night was filled with creative types, all who had either a project or school assignment involving games they were working on. When we weren't discussing serious game development matters, we drank and (I) ate and played mega versions of Jenga and Connect-4. I had several conversations with random people through the evening about their current obsession, and it's hard not to be inspired by those with the talent and ambition to do something new and creative. Being a musician who has offered up my services to a game or two, I wasn't completely out of my element, but there's something about the effort and work that goes into making a game that I've yet to really experience firsthand (beyond a weekend gamejam). Still, long-form projects that you keep attacking little by little, whittling down their defenses over time, until a new creation is born is not outside my wheelhouse. Maybe with my recent foray into Mac development (an upcoming post) I'll turn my attention to a game one day. I play enough of them -- why haven't I made one yet? Oh, right. It's incredibly difficult. Side note: prior to the meetup, I stopped by to meet with a friend at a local game developer's house. I won't name drop, but he worked on a major XBLA release (maybe PC by now) that I'd played and enjoyed. He wasn't alone, and I met several other game developers who were hanging out, too. I was a little starstruck :-}"},{"title":"New coding project: Utter","url":"/2014/05/19/new-coding-project-utter/","tags":["coding","github","mac","miscellaneous","objective-c","osx"],"body":"I've used say.app off and on for many years to play around with the OSX say command, and grab the occasional text-as-audio file for various projects. It's the quickest and easiest way to get speech in digital audio form via a GUI on a Mac that I know of (awfully specific, but still useful!). Unfortunately, say.app never got beyond beta status (still works fine) and hasn't been maintained since 2006(!). Furthermore, I've wanted a coding project to tinker with and Xcode was looking lonely, so I thought to myself \"I should make a better say.app!\". Since there's no source code available, I just dug into the Speech Synthesis API and built (most of) it from scratch. I call it Utter because it's a synonym for \"say\", it's short, it's memorable, and it's kind of silly (and I couldn't find anyone else using it in my short Google search). There is some functionality from the original application I haven't sussed out yet, but the guts are there and functional. I even made a minor adjustment so that when you choose to save the audio to a file, it will still play through the speakers at the same time (say.app is silent when saving to a file). I plan to add additional functionality as I figure out how to harness the speech synthesis system better. Furthermore, now there will be a modern, public repository for such an application that anyone can see and build upon. I'm still a pretty novice Objective-C programmer, so I'm sure my code can be improved, and putting it on Github seems to be the way you put yourself out there and get better nowadays."},{"title":"New coding interest (for now): Lita handlers","url":"/2014/06/01/new-coding-interest-for-now-lita-handlers/","tags":["lita","plugin","handler","ruby"],"body":"My friend Jimothy L. Quadratic made something pretty neat a while ago: Lita (a chat bot). He surpassed me in coding ability and interest a long time ago, and has been progressively making a name for himself on the Internet with all sorts of projects besides Lita, too, but his chat bottery seems to have garnered the most attention thus far. Lita is written in Ruby, something I've tinkered with in the past (like many programming languages). I tried to get a working Ruby on Rails personal project beyond the simple boilerplate, but never followed completely through (Railsbridge, notwithstanding). I've written test scripts in Ruby, and I've played around in IRB for a while. But until now, I've never really made something in Ruby. It's a small something, but it's not nothing. What am I talking about? First of all, check out lita-crazycaps. It's a handler for Lita, which is basically a plugin that extends its behavior, giving it a new \"command\", per se. Mine just takes a string of text and randomly alternates the capitalization of it, turning it into an illegible mess. Not super useful, but something to use as a foundation for any other ideas I come up with. Thankfully for me, Lita has a great built-in template for new handlers that creates all the files you need to make it work (and test it). Even someone like me, who is not particularly experienced in Ruby, can make one that does some simple string manipulation. And so I did. And now I kinda want to make more :-D"},{"title":"Codana.me is my new dev blog","url":"/2014/06/09/codana.me-is-my-new-blog/","tags":["jekyll","update","webdev"],"body":"Code(dev) + coda(music) + name + wanton need to use a specialized TLD = codana.me :) This is the home for all the code, audio, and audio code developments by me, Michael Chadwick, now proudly brought to you by Jekyll. Most of my code is open source and found on Github. Music is usually done under the “Nebyoolae” name/brand, with singles and one-offs found on Soundcloud, and full albums on Bandcamp."},{"title":"My Favorite Windows Apps","url":"/2014/06/12/my-favorite-windows-apps/","tags":["windows","windows-7","apps","faves","list","utilities"],"body":"People love lists. The Internet especially loves lists. It’s no surprise, really: a note followed by another note in a simple, structured order is easy to follow and gain knowledge from. Thus, it’s time to kick this new blog off with a tried-and-true, yet still hopefully useful, list of my favorite Windows apps. I generally pilot around version 7 of MS’s flagship OS, but most of these apps probably work on 8 (or even older versions). Also, this is not an exhaustive list of all the apps I use by any means, but it contains the ones that most readily come to mind while posting, which is really the metric I’m most comfortable with using. Note: I’m a programmer and sysadmin at work, so the apps I talk about will largely reflect that. In general, I love me a finely-crafted, single-purpose utility app that just does its one thing so well I can’t live without it. In no particular order: Console2 We all know the built-in Windows cmd.exe is not that amazing. Sure, it gets the job done but is missing a lot of functionality that *nix command prompt users take for granted (largely, customizability). Enter Console2. It becomes your portal/facade to cmd.exe (and other console interfaces, like Powershell), augmenting it in many ways. This is something I want to install the moment I start seriously using the CLI on a Windows computer. AutoHotKey In conjunction with the just-mentioned-like-whoa-I-mean-it’s-right-above-this Console2, AutoHotKey can essentially give you a slick dropdown CLI that appears and flees at the touch of a keyboard shortcut. Its general usage is assigning macros to keys, so you can do other stuff with it, too, but that sweet Quake-like console effect is my main jam. WatchMe My job recently required that I start tracking my hours. I knew I was going to need a utility that was efficient and flexible since I have a lot of projects that start and stop all the time. WatchMe fits the bill exactly how I want it, allowing me to have multiple timers in multiple categories, all running nicely from the notification section of the taskbar. Dummy Testing applications often requires test data. Sometimes the data needs to be cold, hard files. You could just grab random files littered around your hard drive, or you could use Dummy to make some randomly-datafied chunks. It has both a GUI and command-line version depending on the task at hand. MarkdownPad Need to mark down some Markdown? You could do a lot worse than MarkdownPad. It’s got instant preview of all your markup as you type, and it can even use Github’s stylesheet, which I like. MultiFileRenamer If you’re anywhere from somewhat to amazingly anal-retentive about file structures and naming conventions like I am, then using MultiFileRenamer will be a godsend. It makes renaming a bunch of files all at once, to your specifications, a breeze. WinDirStat Cleaning up files on a computer that has started to near its storage capacity is not really that fun. Knowing what’s taking up all the space helps a bit, though. There are plenty of apps that check a drive and tell you what’s hogging all the bytes, but WinDirStat is small and capable enough, and I’ve used it many times to much success. Youtube-DL So much music is uploaded to YouTube, it rivals if not destroys places like iTunes and Spotify. The quality isn’t guaranteed to be great, but the selection is insane. Sometimes you want to save that music to your computer. Youtube-DL is your Swiss Army knife for that purpose. I guess you could grab cat videos, too. Chocolatey Windows package management with a cute name? Sign me up. Much like Homebrew on OS X, Chocolatey (which is based on the NuGet (get it?) infrastructure) takes a simple command to get one of well over 1000 different applications, and any of its dependencies, onto your computer and ready to use with little effort on your part. It’s just fun, regardless of the efficiency, to type “cinst app-name” and a few moments later have everything set up. In fact, you can install almost every app on this list using Chocolatey. Sweet, right? And with sugary confection, so concludes my list of righteous Windows apps that I use often and love. Many of them are created and maintained by small teams or even individuals, and a lot of them have their source shared on the web for others to download, play with, and contribute back to the mother app. All of them are free, which I am very appreciative of. Still, if they have a donation bucket listed somewhere on their site, it’s never a bad idea to throw a little cashitude at them. Next, which means soon but not just yet, we, meaning I, will tackle OS X. Apple’s digital landscape offers many apps of its own that I enjoy using just as much (if not more!). When the time comes, I will share this info with the endpoint of the network of computers you just now used to find this very blog post."},{"title":"My Favorite Mac Apps","url":"/2014/06/15/my-favorite-mac-apps/","tags":["mac","osx","mavericks","apps","faves","list","utilities"],"body":"As promised a few days ago, I come back to you with my list of favorite apps and utilities, only on the Apple side of things. I’ve been regularly using a Mac(Book (now MacBook Pro)) since about 2007. The initial spark was probably my Apple-phile wife and her Apple-phile family, but the real catalyst was audio. Until I made the switch, I’d been recording on a custom-built PC, but constantly experiencing issues with hardware, and not really liking the software available. The Mac had a reputation for working well with creatives, especially on the music end, so I took the plunge and have been pretty happy since. Of course, being a general computer geek, I like trying out random apps I see linked in blog posts or recommended by others, no matter the use. Some stand out and get used a lot, while others may be tested and deleted. The former, while still not being all-encompassing, is what makes up the following list. Again, in no particular order: Mou Markdown is my favorite lightweight markup for turning text files into RTF without all the unnecessary encoding in the background. Github uses it, too, which I frequent. Mou is a plenty-capable editor for making those files and I love it. Muzzy A quick menu bar app to tell ya what’s playing on the eyeToons, with a clever little line-scrapes-across-the-cover-art motif to indicate your position in the song. BootChamp I may love my Mac, but I also realize Windows has a significant place on one of the partitions of my MBP’s main hard drive. Usually this is accomplished through Parallels, but when I need the full power of 100% Windows (i.e. I want to play a 3D game on Steam), this little utility gets me there in a snap. DoublePane OS X is curiously bereft of much built-in keyboard-controlled window management. I’m a control freak about that stuff, even when it’s just duplicating the built-in window management of Windows 7 (make a window take up 50% of the screen or maximize it at the touch of a keyboard shortcut). DoublePane makes my life a lot easier. GfxCardStatus My MacBook Pro has a for-2D-windowing-stuff on-board graphics card, and it has a for-pushing-the-limits-of-3D-stuff “real” graphics card. The OS is usually pretty good about dynamically switching, but when you need more control, GfxCardStatus gives it to you. MagiCal MagiCal gives me a little mini-today’s-date on the top menu bar, which drops down into a tiny calendar for the month when I click it. Why can’t OS X do that? I dunno. NameMangler Mangles names like whoa. Much like my need to keep my files in an organized structure on Windows, I want my files named intelligently and orderly on OS X. Name Mangler is smart and sleek and does the file naming business using a great interface. Semulov Another gem of an app from Kevin Wojniak, Semulov adds a menu bar app that lets you quickly unmount any volumes you got loaded. This is perfect for me because I use a Hengedock and occasionally need to relocate my Mac from its comfortable grip to somewhere more portable, and I want to nicely unmount my Time Machine drive before doing that, cuz that’s just neighborly, right? TextMate I’m using MacroMates’ sweet app to write this very blog post, and you probably already know how good it is if you’re a Mac user and a developer of some sort. Or maybe you’re using Sublime. Or maybe…like…vim or emacs or something. Whatevs. It’s a text editor and it edits text nicely, even letting you open whole project folders and giving you a tree to navigate it while you edit its innards. Oh, other apps do that, too? Well, TextMate 2.0 is still in alpha and free, so it has that going for it, which is good. ScreenFlow When you need you need to make a presentation on your Mac, with windows and mouse clicks and audio narration, Screen Flow is pretty darn pro. It’s not free or particularly cheap, but it is the real deal for that thing I just mentioned. I once took an online class that allowed us to make screencasts as a way to accomplish assignments, so I found this app and used it and loved it and bought it and use it some more. TotalTerminal Remember that cool Quake-like dropdown console I mentioned during my Windows list of favorite apps? Remember how it took a combination of Console2 (to replace the limited built-in cmd.exe) and AutoHotKey (to tie showing/hiding Console2 with a keyboard shortcut)? On OS X, it just takes TotalTerminal. Boom. Audacity Not a Mac-only app, but worth mentioning now since I use it on OS X much more, Audacity is kind of the industry-standard free audio editing application. It does the job of taking audio and mangling it all up, and then saving it to various formats. Despite using Logic to do all my serious, multi-tracked music projects, Audacity is still a tool that comes out to do the nitty-gritty stuff plenty of times. Logic Pro The Mac Daddy (ahem) of audio apps on OS X. This is the industrial behemoth, replete with many DVDs-worth of samples and plugin goodness (now all downloadable from the App Store). There are too many yummy sound things to list that I love about Logic and what it comes with, and if you’re serious about aural production on a Mac then you already know this one. Unless you use Ableton, Reaper, Pro Tools, Cubase, Studio-One, or any other DAW software, and then I just sound like a fan boy. Whoops. Cog If you’re like me, and I guess it’s always possible, then you probably play(ed) a lot of video games in your time. The sounds of the NES and Game Boy and Sega Genesis and the like, “chiptunes” if you will, are like your classic rock. They may even continue to be in your desired music playlist today. If so, Cog is the way to play all those perfectly legal NSFs and SPCs and such. Yes. Vox For all of your non-chiptune needs, Vox is the Winamp of OS X. Apple’s iTunes is a great app, of course, but it’s a bit bloated, and Vox is there to be your lightweight music player when that’s all your need: to play some music quickly. NanoStudio A seriously powerful synth and sampler that still has a small footprint and is available not only on Mac, but also on Windows, and iOS. The 1st and 2nd platforms are TOTALLY FREE, as well, so you can get your feet wet before shelling out currency for the portable version. I’ve made whole albums with this thing and it’s kind of a joy to use, especially on iOS. The interface is well-thought-out enough to work on both desktop and mobile, but really shines on the latter. And it’s all made and maintained by one duder. Amazing. SoundFlower Sometimes I need to route audio from one place to another in the bowels of the OS X sound subsystem, and Soundflower is pretty good at doing that. Bfxr Need some lo-fi sound FX for a game soundtrack you’re working on? Or just for fun? Bfxr is a web app that can do that for you, mixing the square waves and filtered white noise to get you lasers and explosions and jump noises. Then, if you want an offline version of the tool to use when you’re outta network, download it for OS X (and Windows). OK, I think that’s enough. Be sure to check out the source code for the apps I listed that have it available, and help out to make ‘em better. If’n source isn’t available, or you’re not the programmin’ type, at least drop some money on those you use that are free and given away, like gifts to a crowd of strangers we like to think of as The Internet. The mountains of free code on the web is multitudinous, but while the good will engendered by giving away hours and hours of digital effort is a reward in and of itself, they all probably eat food and like to sleep indoors occasionally, too. Preaching aside, thank you to all the devs who make all the apps I use (and don’t yet use!) and enjoy. Coding is tough, man."},{"title":"Excluding Pages from Top Navigation in Jekyll","url":"/2014/06/16/excluding-pages-from-top-navigation-in-jekyll/","tags":["jekyll","customization","navigation","layout","webdev"],"body":"While dynamic creation of collections of variables is often a very helpful thing, sometimes it treats all its members the same, even though they are not. Jekyll, the tech that creates this very site, is a bit non-picky about what it puts in its site-wide navigation, but it can be taught. Jekyll is a neat static-site generator written in Ruby. It allows me to have a blog without a database, as I can just write stuff in specifically-named and specifically-located files that the generator (i.e. Jekyll) knows how to process into the actual content that my site consists of (which is what gets deployed to my host, Github). The blog post you’re reading right now is a good example of that. Another good example is essentially any page that isn’t a blog post. As each of them critters get created, the header layout (at least in boilerplate Jekyll) of the site auto-adds each one to the site-wide navigation in the top-right. Subdir1 Subdir2 Subdir3 In general, this is cool, but not every page is something you might want to show up in that navigation. For instance, some may be additional pages inside a section of the site that you only want the index page of that section linked. There are likely many ways to accomplish the task of excluding them, but one quick and easy way I found is to simply harness the power of Jekyll’s Front-matter for any page you want to exclude. It’s a simple two-step process: 1) Add an unless clause to your site-wide navigation block (this is boilerplate Jekyll, with percent signs missing as they were being parsed, btw): { for page in site.pages } { unless page.exclude_from_nav } { page.title } { endunless } { endfor } 2) Create a custom variable in the Front-matter section of the page you don’t want to be automatically added that matches the one above: --- layout: default title: SubDirPage2 exclude_from_nav: true --- Voila! That page is now safely hidden until you link to it in some laborious, manual way."},{"title":"Adventures in Spritekit","url":"/2014/06/19/adventures-in-spritekit/","tags":["ios","mac","game","spritekit"],"body":"For some reason, I’ve really wanted to make a game lately. I play them so often that it’s natural that I’d eventually want to make one. My recent renaissance in personal development is helpful in accomplishing this goal. But where to start? A few days ago, I decided to try something easy, so I made a really simple console app in Ruby called Guess the Number. Oh, you’ve played this kind of game before? Heh. Well, making an original game is a future step. For now, I’m experimenting with recreating old ideas for the umpteenth time to get the hang of it. Since I’ve become fairly adept at getting Xcode and Objective-C to do some things for me, and yet I still haven’t really cracked open developing for iOS, I looked into how one would make a game within it. Seems like there’s a built-in framework for just that: SpriteKit. It comes with a bunch of helpful methods to make a view with a scene in it, and then populate it with sprites that perform actions. So far I’ve made a game where a ninja throws projectiles at ghosts, and then another one where a colored ship shoots projectiles at other colored squares. It’s kind of magical how little it takes to make a “game” (an app where you perform actions to accomplish goals until you either perform an ultimate goal and start over, or you die and start over). I’m still largely at the copy pasta stage of programming when it comes to games, but I’m getting there! If I could only actually come up with an original idea, then I’d have a real goal to shoot for. Until then, I will keep making everybody else’s ideas, cuz you gotta start somewhere."},{"title":"Playing with Ruby Audio","url":"/2014/06/26/playing-with-ruby-audio/","tags":["ruby","audio","ruby-audio"],"body":"I’ve got a bunch of albums on Bandcamp. They’re generally anywhere from 20-50 minutes long. Sometimes, you just want to test out something and not try to take in the whole enchilada in one sitting, so I decided a while ago to start making “samplers” that are ~2 minutes long and provide a kind of appetizer mashup option. This is kind of tedious, so what else but code could come to the rescue! Ruby is a swell language to do stuff like this in, so naturally I hunted around the net to see if there was some kind of library or gem that made interfacing with audio files easier. Lo! There is ruby-audio (of course). I’ve not done much digital audio file manipulation, so I’m starting small and simple. First, I created something that reads in a WAV file and exports a bunch of its information, just to make sure we got something going here. 1 2 3 4 5 6 7 8 9 10 11 12def display_sound_info(file) snd = Sound.open(file) lenSecs = (snd.info.length).round(2) lenMins = (lenSecs / 60).round(2) puts \"Filename: #{file}\" puts \"Channels: #{snd.info.channels}\" puts \"Frames: #{snd.info.frames}\" puts \"Length: #{lenMins} mins (#{lenSecs} secs)\" puts \"Sample Rate: #{snd.info.samplerate}\" puts \"Seekable? #{snd.info.seekable}\" snd.close end Next, I decided I should actually try to read in a file and then write it back out, only in a shorter, snippet-ier format. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38def create_snippet(file) SNIP_LENGTH = 15 sndorig_comp = file sndorig_extn = File.extname sndorig_comp # grab the base filename for later sndorig_name = File.basename sndorig_comp, sndorig_extn Sound.open(sndorig_comp) do |snd| info = snd.info sndlen = info.length # grab a random starting point in the file snip_time_begin = rand(0..sndlen) # correct if the beginning point is in the last 15 seconds of the file if snip_time_begin.between?((sndlen-15),sndlen) snip_time_begin = snip_time_begin-15 end # create a buffer as big as the snippet bytes_to_read = (info.samplerate * SNIP_LENGTH).to_i buf = Buffer.new(\"float\", bytes_to_read, info.channels) # seek to where the snippet begins and grab the audio snd.seek(info.samplerate * snip_time_begin) snd.read(buf, bytes_to_read) # create new file's name from original sndsnip_name = sndorig_name + \"_snippet.wav\" # write the new snippet to a file out = Sound.open(sndsnip_name, \"w\", info.clone) out.write(buf) puts \"#{sndsnip_name} created.\" if out end end It took me a bit of trial and error (and plenty of doc-reading, and googling) to get the new file to actually be a subset of the original, and to start where I wanted it to, but it works! The algorithm just chooses a random 15 second chunk of the original, which may not always work aesthetically, but does a decent job of what I want. Tying the second bit of code into a loop that works on multiple files and then mashes them together shouldn’t be too difficult, but I’m sure I’ll need to massage it a bit. Of course, this doesn’t make any transitions between pieces, so I need to now learn how to change volume and create fade ins and outs (and crossfades, too, if possible). As usual, the amount of time it’s taken me to get to this point far exceeds the length of time I’d spend doing it manually, but it fascinates me to see if code can accomplish the task, regardless. Once I get it working, future album samplers will be easy to make, and that’s what coding is all about :)"},{"title":"Commanding the Line","url":"/2014/07/08/commanding-the-line/","tags":["cmd","command","shell","bash","prompt","osx","windows"],"body":"$ echo 'Hello World!' Graphical User Interfaces (GUIs) are a great thing and they make computing a lot easier. I’ve been fiddling with audio programming a bit lately (mainly loading/modifying/saving WAV files), and while getting your hands dirty allows for more flexibility and automation, I still love Audacity and Logic for their accessibility. That being said, the command line is still often more powerful, but it comes with a higher learning curve. That, and it still feels like magic most days. Being Prompt [~/Code/projectX] (master) mike@bagel(09:04:52)$ That’s what my current bash prompt, if it were in a mysterious code directory using git, looks like on OS X 10.9. It hides itself until I hit a keyboard shortcut to drop it down from the top of the screen via TotalTerminal. The prompt itself is a smattering of variables and functions in my ~/.bashrc that all get munged into the following line: export PS1=\"\\[${red}\\][\\w]\\[${darkcyan}\\]\\$(_hg_ps1)\\$(__git_ps1)\\n\\[${green}\\]\\u@\\h\\[${yellow}\\](\\$(date +%T))\\[${end}\\]$ \" I understand that somewhat gobbledygook-ish line of characters enough to piecemeal it together, but I still would probably not be able to create it from scratch. The people who created the system I’m bending and warping remain superior, and I’m glad they let me play in their world. Learning to Comply When I first started computing, lo, back in the mid-90s on an AST Pentium 100, I had only cmd.exe on Windows 3.1(1?), soon to be replaced by basically the same application on Windows 95. I’m pretty sure I didn’t do much with it at the time because clicking on icons and such was a lot more intuitive. Eventually, over the next ~20 years, I would learn of the power of the command line, and grow to love modifying systems using it. I think I got interested in the shell mainly due to my interest in programming. Sure, you could create a little Mac app in Xcode, or a Windows form in Visual Studio, and there is a definite joy in bringing life to an otherwise lifeless set of stock windows. But typing some arcane command in cold, stark text into a black void brings a different kind of rush. There always seems to be as much that could go wrong as could go right when you can type anything you want, and that brings with it delight and terror in equal doses. Scripts and system configuration are the building blocks to massive enterprise software or exciting video game worlds. Need to automate some tedious task? Write a script. Think that the font size in some window could be bigger, but there’s no GUI option? Find a config file and modify it. Once you start manipulating prefabricated environments, you realize how people get their ideas for full-fledged applications: we like to create. Spend enough time typing text into a box and you start to want to control how it looks and functions more. That’s how “C:\\” in 1995 becomes what you see above in 2014. Cryptic Writings Even today, anytime I compile something from source or, more often nowadays, install something on OS X using Homebrew or on Windows using Chocolatey all the text that flows down the shell window can still seem like incantations written in a strange language. All the compilation messages that go flying by kind of blow my mind. Still, the system was created by humans, so it’s obviously possible to understand and reproduce them. When they’re processed by a computer many times faster, it distorts the reality, making it seem unreal. Null Termination To finish this stream-of-consciousness-post, I’ll just say this: to anyone looking to better understand how computers work, learn your CLI-fu. Behind every GUI application you’re more comfortable with lies a potential command line interface, simply-controlled by lines of text. All programming is just a list of instructions, interpreted or compiled by the computer. You will be able to effect much more change knowing how to control your system at the prompt than just relying on the choices given to you by the OS or app creator. At the same time, with that power comes responsibility, and the ability to hose stuff up badly if you don’t know what you’re doing, so research and test before typing a fateful command you’re not familiar with. Bonus Link! Command LIne Magic is a neat Twitter account that just posts interesting things to try on the CLI. $ echo 'Goodbye World!'"},{"title":"Sending Gmail from OS X Yosemite Terminal","url":"/2014/11/23/sending-gmail-from-os-x-yosemite-terminal/","tags":["web","email","gmail","osx","yosemite","terminal","bash","shell","scp","mail"],"body":"I’ve messed around with my own personal file host system for years, so that I could share stuff with others over the Internet. Initially, it was just a lazy (FTP to host) + (email link to friend) system. However, the uber way to handle something like this is to write a slick terminal script one-liner. My OS of choice is OS X and I updated to Yosemite recently, so I decided to figure out how to do it and I’m thinking someone out there may find this information useful for any script that needs email capability. The Basic Script My script uses two basic OS X utilities: scp and mail. The former is for transferring files from a remote host, and the latter is for sending the email to notify the friend who needs the file. The initial, basic script lives in my ~/.localrc file, where all my aliases and private functions that I don’t want to include in my public dotfiles (due to usernames/passwords/local directory names/etc). Note: the variables below, like ${SSHUSER}, are set up previously in my ~/.localrc file (ex. SSHUSER=”username”), so you’ll need to do the same, or simply fill in the appropriate values in your script. function shareit() { scp $1 ${SSHUSER}@{SSHHOST}:${REMOTEDIR} } So far, this is just a simple alias to a command. Basic stuff not worth blogging about. But just wait! Let’s add the ability to copy a link to our uploaded file so we could drop it in an email or IM for our buddy. 1 2 3 4function shareit() { scp $1 ${SSHUSER}@{SSHHOST}:${REMOTEDIR} echo \"${REMOTESERVER}/$1\" | pbcopy } Another fairly basic command, but now you’ve got an uploaded file AND a link to drop somewhere. For a while, this seemed good enough for me, but then I got to thinking: now I need to open a web browser or a mail client to send an email, and it’s always the same template, so why don’t I automate it? Setting up Postfix The mail command is a functioning email client and server, which uses a service called postfix to do its work, so it’ll do the job nicely. However, you need to have an SMTP server set up (this may be done already if using OS X Server, but it definitely wasn’t on my MacBook Pro), and that takes a bit of configuration. Since I (and millions of others) use Gmail, I figured I could probably use their SMTP server to do the honors. Setting that up took a little bit more time than I thought, but it’s functioning now. Here’s the secret sauce: Add some lines to /etc/postfix/main.cf, just under where a bunch of #relayhost commented lines are (as always, make a backup, just in case) myhostname = smtp.gmail.com relayhost = [smtp.gmail.com]:587 smtp_sasl_auth_enable = yes smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd smtp_sasl_security_options = noanonymous smtp_use_tls = yes smtp_sasl_mechanism_filter = plain # this was specifically necessary for yosemite Modify (create if missing) your /etc/postfix/sasl_passwd file by adding the following, single line: [smtp.gmail.com]:587 user@gmail.com:password. Note: if you use two-factor authentication, this is the time to make a new App Password and use it in place of your regular password. Run the following commands, one at a time, to finish configuration. sudo chmod 600 /etc/postfix/sasl_passwd sudo postmap /etc/postfix/sasl_passwd sudo launchctl stop org.postfix.master sudo launchctl start org.postfix.master The final two lines restart the postfix service to make sure all your new settings get loaded. I just made an entry in my .aliases file that runs them both, one after the other, and that made testing this a lot easier. Test out your new Gmail SMTP-enabled postfix service echo \"Hello World\" | mail -s \"Test from terminal\" user@domain.com Email-Empowering the Script Now we can add our email notification to our upload script. 1 2 3 4 5 6 7 8 9function shareit() { scp $1 ${SSHUSER}@${SSHHOST}:${REMOTEDIR} echo \"${REMOTESERVER}/$1\" | pbcopy if [ \"$#\" -eq 2 ] then echo \"Emailing link to $2...\" echo \"${REMOTESERVER}/$1\" | mail -s \"Link to file '$1'\" $2 fi } Script Usage Now, in order to send someone a file by uploading it to a host you have access to, just run the following command: shareit file.zip [user@domain.com] The file will upload, a link will be created, and a simple form email will be sent to the user notifying them. If you omit the email address, it will just upload the file and copy the link to the clipboard for later use. One final note: currently the file to upload will just overwrite anything of the same name already on the server, as I didn’t bother to write any existing-file checking code yet. Also, it won’t yet tell you if the email was successfully sent, so that’s based on trust and much testing of the mechanism before throwing it into the script. Finally, you could just use Dropbox/Google Drive/Skydrive/iCloud/etc. for the same utility…but isn’t it more fun to learn how to do it yourself? Hope this is useful to someone!"},{"title":"Some Fun New Web Projects to Kick Off 2015","url":"/2015/01/07/some-fun-new-web-projects-to-kick-off-2015/","tags":["webdev","html5","javascript","jquery","localstorage","json"],"body":"2015 is apparently the year that I get inspired to work on web projects again, and rediscover the joys of the change-refresh cycle, JavaScript/jQuery, and HTML5. I just finished (is that really possible, though?) a couple new web apps and I’d like to drop some knowledge about them. Sketchage A friend is starting to get into development, and she posted about a web application that’s like a simplified etch-a-sketch tool. For some reason, reading through the code inspired me to fork it and go a little crazy updating it and adding features. In the end, it became a more powerful app, with a color picker, two drawing modes, better resizing tools, and the ability to save your work as a BMP. I renamed it Sketchage and you can have at the code, if desired. Just Pick One My coworker and I go out to lunch together a lot, and I never know where to go. I’ve mentioned that it would be a lot easier if we just had a list of places we went all the time, and a big button to choose one at random. Well, I finally did it. The foundation of “picks”, as I call them, is a JSON file that gets loaded into an array and picked from when you hit the big button. Since I never played around with HTML5 Local Storage before, I decided to try giving the user the ability to add their own picks (since I couldn’t be sure I got all the lunch places, and we’d add more later), but still stick around even if you close the window/tab/browser (Session Storage would be good if you just wanted it while the site was open). A good explanation can be found here. It was pretty easy to implement once I got used to the JSON parsing, and now it’s pretty functional. I spent a lot of time making sure it looked good on mobile (many thanks to Initializr), and even created a custom favicon.png and startup.png image so that Apple devices could save a link to the site on the home screen, essentially “appifying” it in a crude manner. We’ll see how often it gets used, as my coworker often just goes with their gut, but at least it was a fun exercise. Grab the code and use it for any multiple choice quandary!"},{"title":"Playing with Javascript and the Web Audio API","url":"/2015/01/22/playing-with-javascript-and-the-web-audio-api/","tags":["webdev","audio","html5","javascript","audiohash"],"body":"While working on a tool in Ruby to make sampler tracks out of several album components, I realized I did not yet know enough about how to manipulate audio to do what I wanted. I needed to approach it from a different vantage point, and a different language altogether. So, I decided to see what the state of audio on the web was, having not done much beyond hosting and downloading MP3s years ago. Spoiler: it’s pretty frickin’ cool now, guys. The Truth Further Spoiler: I haven’t quite got everything I need figured out, uh, figured out yet. My initial aim was to create a web app that could take random chunks of multiple audio files and combine them into a single, longer file, making a “sampler” of sorts. I even have a name: Audio Hash. Unfortunately, I’ve run into some issues in the low-level audio manipulation that’s kept it in a non-working state for a while. However, I’ve learned a bunch and the Web Audio API can do some neat things. As Easy as Code For example, with about a dozen lines of Javascript you can load up an audio file and play it (eschewing any kind of error checking, obv), but then do many other things to it that a simple can’t do. var audioContext = new ( window.AudioContext || window.webkitAudioContext )(); var audioBuffer; var bufferSource = audioContext.createBufferSource(); var req = new XMLHttpRequest(); req.open(\"GET\", \"audio.mp3\", true); // grab our audio file req.responseType = \"arraybuffer\"; // needs to be specific type to work req.onload = function() { audioContext.decodeAudioData(req.response, function(buf) { bufferSource.buffer = buf; // load the audio buffer data bufferSource.connect(audioContext.destination); bufferSource.start(0); // play the file (from the beginning) }); }; req.send(); You could also use a control to upload the audio into a usable state, if you desired. Now, add a button to stop the rainaudio. Stop Audio For a much more thorough explanation, check out Josh On Design’s Deep Dive into Web Audio, which I’ve cribbed/paraphrased a bit above to give you the simplest example. With another couple lines, you can route that audio file through a gain node to change its volume. var gainNode = audioContext.createGain(); // make a new gainNode gainNode.gain.value = 0.3; // set the volume bufferSource.connect(gainNode); // connect sound to gain gainNode.connect(audioContext.destination); // reconnect gain to dest There are a bunch of other kinds of nodes for effects (visual ones, as well), and CreativeJS has a great article on all of them. Down the Audio Hole As you can see, this can be pretty flexible and awesome if you want to get into the nitty-gritty of audio, rather than just playing a song in an embed. For Audio Hash, I needed to be able to actually create audio, not just play it, so I had to go deeper. This means I’ve been staring at code like the following for a bit, poring over why it doesn’t do what I want it to do (yet). function _encodeWavFile(samples, sampleRate) { var buffer = new ArrayBuffer(44 + samples.length * 2); var view = new DataView(buffer); // RIFF identifier _writeString(view, 0, 'RIFF'); // file length view.setUint32(4, 36 + samples.length * 2, true); // RIFF type _writeString(view, 8, 'WAVE'); // format chunk identifier _writeString(view, 12, 'fmt '); // format chunk length view.setUint32(16, 16, true); // sample format (raw) view.setUint16(20, 1, true); // stereo (2 channels) view.setUint16(22, 2, true); // sample rate view.setUint32(24, sampleRate, true); // byte rate (sample rate * block align) view.setUint32(28, sampleRate * 4, true); // block align (channels * bytes/sample) view.setUint16(32, 4, true); // bits/sample view.setUint16(34, 16, true); // data chunk identifier _writeString(view, 36, 'data'); // data chunk length view.setUint32(40, samples.length * 2, true); // write the PCM samples _writePCMSamples(view, 44, samples); return view; } I’ve even gone as far as finding someone who figured out the code to put the raw audio data as HEX into an HTML div. Both exercises are about as low-level as I’ve gotten in the development world, and it feels cool, if overwhelming. Regardless, the exported audio files I’ve been creating are too short and completely silent, so it’s currently a failure for now. I’ll most likely end up using some kind of existing audio library, as I don’t need to write bytes from scratch, but I wanted to try my hand at low-level audio futzing to see how it worked. For the Road Despite not succeeding at making the tool I envisioned, I’ve made progress and spent some time on the UI and getting a modular system to load sounds on a page, so check out Audio Hash on Github if you want to root around in the source. I later experimented with a custom Windows app (and third-party audio library ;P) after much frustration with the web app version, and I’ve gotten a lot farther, but I’m not done getting it to work on the web just yet. More on all that in a later post."},{"title":"Audio Manipulation with NAudio on Windows","url":"/2015/02/03/audio-manipulation-with-naudio-on-windows/","tags":["windows","windows7","naudio","audio","application","audiohash","wav"],"body":"After much frustration with some low-level audio manipulation in Javascript, I decided to change gears and make my first Windows Form application using Visual Studio 2010 and a great 3rd-party audio library. Yes, it’s really 2015; I’m just behind. In this, I have gotten further in my goal of gluing disparate audio files into a single one. Which is pretty great. A Great Audio Manipulation Library is Sometimes Needed The general makeup of Audio Hash on the web carried over fairly easily to a Windows Form app, in that getting the UI to do what I wanted for basic things, like loading audio files and playing them, was not an issue. However, the task of writing out a WAV file in code is still an issue. Thankfully, there’s a great 3rd-party library called NAudio that does all the heavy lifting. NAudio is not really necessary to just load a file and play its data to your speakers, but when it comes to reading multiple files and writing their composite data out to a new file, it was the only way I could get what I wanted to work. And, in fact, I was able to get the basic idea of my app working. Thus, you can now queue up a bunch of files, choose an n-second chunk, of them, and glue that all together into a new file (“sampler”). Some Code, To Illustrate Here’s some code! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34... foreach (string sourceFile in sourceFiles) { using (WaveFileReader reader = new WaveFileReader(sourceFile)) { if (writer == null) { writer = new WaveFileWriter(outputFile, reader.WaveFormat); } else { if (!reader.WaveFormat.Equals(writer.WaveFormat)) { throw new InvalidOperationException(\"Can't concatenate WAV Files that don't share the same format\"); } } int soundLen = (int)reader.TotalTime.TotalMilliseconds; sampleLen = Math.Min(sampleLen, soundLen); TimeSpan sampleStartPos = new TimeSpan(0, 0, 0, 0, 0); TimeSpan sampleDuration = new TimeSpan(0, 0, 0, 0, soundLen); if (sampleLen > 0) { sampleStartPos = GenRandomStart(soundLen); sampleDuration = new TimeSpan(0, 0, 0, 0, (int)sampleLen); } boolAudioFileWrittenSuccessfully = WriteAudioFileToDisk(reader, writer, sourceFile, outputFile, sampleStartPos, sampleDuration); } } ... To break this down a little, we’re iterating through all audio files loaded by the GUI, grabbing a chunk from each, and writing all that in sequential order to a single output audio file. The GenRandomStart() function uses the length of the sample chunk to find a random starting point in the file to begin grabbing from. Now, let’s go into the WriteAudioFileToDisk() function: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15... while (reader.Position 0) { int bytesToRead = Math.Min(bytesRequired, buffer.Length); int bytesRead = reader.Read(buffer, 0, bytesToRead); if (bytesRead > 0) { writer.Write(buffer, 0, bytesRead); } } } ... I’m cutting out a bunch of code, but the meat of it all is this: as long as the audio file reader hasn’t reached the endPos, or the position in the file that’s been designated as the stopping point (i.e. end of the random sampled chunk), check to see how many more bytes need to be read (as long as it doesn’t exceed the sound’s length) and write that to our output WAV file. One bug I’ve already gotta squash is the one where the random chunk starts after a point where the length of it will be reached (e.g. an audio file is 10 seconds long; the random chunk is 5 seconds long; the random chunk got chosen to start at second 8, meaning we’re only getting a 2 second chunk). However, we still got a working model, overall. Of course, this doesn’t do any kind of fancy anything, like fading in and out at the extremes of our output file, nor cross-fading between audio files. It’s all very start and stop. I think I’m going to have to delve deeper into how I’m reading/playing the files to solve that one. For the Road The original purpose for this tool, which was to make album samplers from a few of their tracks, got done well before I made any real progress. A human being is a lot better at picking the best dynamic moments of a track to combine together (and a lot faster). I still would like to try to make this tool better (and make it work on the web), so I’ll keep at it and blog any results I come about. Check out the entire source code."},{"title":"Don't Beep When You Can Feep","url":"/2015/05/06/dont-beep-when-you-can-feep/","tags":["audio","cli","beep","feep","ruby","wav","wavfile"],"body":"I’ve been interested in sound and audio for a long time now. Probably from the time I heard my first beep or click from a child’s toy (can’t be sure), my mind got hooked on these air fluctuations and how to make more of them. Once I got into playing guitar and messing around on computers and patterned air movements (i.e. music), this became a fully-realized obsession. Even with all of the complexity inherent in my musical endeavors, the simple things still feel good, and if I can make a simple Ruby gem that can beep at you, then by Thor’s hammer I will! Ahem. Feeping Around Spending time at the command line, coding away at various things, sometimes I just want to make some noise. Of course, most of us turn to our MP3 collection or Spotify, but that wouldn’t be nerdy enough nor would it involve programming, so I borne feep into the world. Just to quickly explain the name, a “feep” is an archaic name given to the “soft, electronic ‘bell’ sound” of some old display terminals. I don’t personally remember anyone calling the ding/bing/boop/beep/ping/etc sound of old pre-DOS computers a “feep”, but 1) it’s adorkably fun, and 2) the obvious “beep” is already taken. Wait, I’ve Heard This One Already In today’s day and age, the question “Is there something that already exists that does what my application sets out to do?” is almost 100% sure to be answered with “YES, MANY THINGS”. And those many, many things are often open-source and on Github, rife for the rifling through and building from. Searches across the Internet found several application that make sound, even in Ruby (the language I wanted to make feep in), but nothing I found (at the time) did all of the things I wanted, and that’s when a programmer decides to make their own. How Make Sound Name chosen and purpose decided upon, I set out to make a command line tool that could make sound with the following requirements (which increased as I went along): 1) Synthesize a sound from a simple waveform 2) Control the note/frequency, amplitude/volume, and duration 3) Play multiple notes at once in a chord 4) Play multiple notes in a row as a scale One thing I quickly found was that to make a computer utter a simple “FEEP!” sound via CLI is not exactly intuitive, nor is it consistent across all operating systems. Here are just some of the examples I tried, but there are more: Windows: CTRL-G in a command line prompt to get a ^G system code, then hit enter Not intuitive and more of an unintended beep than anything. Mac/OSX: osascript -e beep A little better, but still a bit wordy and unintuitive. Macs can also use the say \"beep\" command, but that uses a synth voice and actually says the word “beep” and does not make a beep sound. *nix: echo -e \"\\a\" Basically the same as Mac. Python: python -c \"print '\\7'\" Similar to the Mac way, and just as unintuitive. Why would you think to “print” something when you want to hear something? Ruby: puts 7.chr See the python explanation. Despite most systems’ insistence on printing sounds, I still felt like Ruby was the best way to approach the issue due to my recent interest in making fun little system applications, so I continued down that path. My first big break was finding a nice Rubygem library called win32-sound that lets you type something like Sound.beep(100, 1000) and get a tone at 100 Hz for 1000 milliseconds. Now we’re getting somewhere! Alas, it does not work on non-Windows, so I had to dig deeper. The biggest break came when I stumbled upon a nice person named Joel Strait. He does a lot of open-source applications with audio. The most useful to me were the WavFile Rubygem library and his adaptation of it in NanoSynth. Honestly, it kind of changed my mind about the whole project. I now had a way to solve all the arcane command madness: use WAV files. Instantly cross-platform, consistent in quality, and (eventually) allowing for all kinds of interesting manipulation of the sound itself. Performance-wise and overhead-wise it’s probably not the best, but so far it’s worked fine. My on-the-fly sound creation engine was ready to be started. Let There Be Feep Finding NanoSynth was a boon to productivity, because it gave me a way to make a sound from a specific waveform, at a specific frequency, at a specific volume, for a specific duration. It was just a Ruby script, however, and not a Rubygem, so my initial idea to fork and improve it turned into my own project, which became feep. Once it was gem’d, which was an interesting experience in and of itself, I started to improve it all the ways that my requirements suggested. NanoSynth created WAV files and, through an optional, additional application (like afplay or sounder.exe), played them, as a completely different step. I wanted to make it all happen in one fellow swoop, without leaving anything behind (by default). So, I have feep auto-play the WAV file (which still requires that additional application) once it’s created, and then delete it, effectively making it a “sound producing” app, not a “sound file creating” app. This all hides the fact that an actual WAV file is being created as neatly as I can manage, since the WavFile Rubygem can’t (yet) play its product without writing to the file system. After getting the basic functionality working, I later had the idea of being able to play multiple notes in a scale. This was initially a separate gem, pulling in the original feep as a library (wanted to learn how that worked), but it was too much of a hassle and it just got absorbed as a feature. I’m sure there’s a better way to access all possible musical notes besides a static list, but I can’t think of what it would be (if you know, let me know!): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24NOTES = Array[ 'C0','C#0','D0','D#0','E0','F0','F#0','G0','G#0','A0','A#0','B0', 'C1','C#1','D1','D#1','E1','F1','F#1','G1','G#1','A1','A#1','B1', 'C2','C#2','D2','D#2','E2','F2','F#2','G2','G#2','A2','A#2','B2', 'C3','C#3','D3','D#3','E3','F3','F#3','G3','G#3','A3','A#3','B3', 'C4','C#4','D4','D#4','E4','F4','F#4','G4','G#4','A4','A#4','B4', 'C5','C#5','D5','D#5','E5','F5','F#5','G5','G#5','A5','A#5','B5', 'C6','C#6','D6','D#6','E6','F6','F#6','G6','G#6','A6','A#6','B6', 'C7','C#7','D7','D#7','E7','F7','F#7','G7','G#7','A7','A#7','B7', 'C8','C#8','D8','D#8','E8','F8','F#8','G8','G#8','A8','A#8','B8', 'C9','C#9','D9','D#9','E9','F9','F#9','G9','G#9','A9','A#9','B9' ] NOTES_ALT = Array[ 'C0','Db0','D0','Eb0','E0','F0','Gb0','G0','Ab0','A0','Bb0','B0', 'C1','Db1','D1','Eb1','E1','F1','Gb1','G1','Ab1','A1','Bb1','B1', 'C2','Db2','D2','Eb2','E2','F2','Gb2','G2','Ab2','A2','Bb2','B2', 'C3','Db3','D3','Eb3','E3','F3','Gb3','G3','Ab3','A3','Bb3','B3', 'C4','Db4','D4','Eb4','E4','F4','Gb4','G4','Ab4','A4','Bb4','B4', 'C5','Db5','D5','Eb5','E5','F5','Gb5','G5','Ab5','A5','Bb5','B5', 'C6','Db6','D6','Eb6','E6','F6','Gb6','G6','Ab6','A6','Bb6','B6', 'C7','Db7','D7','Eb7','E7','F7','Gb7','G7','Ab7','A7','Bb7','B7', 'C8','Db8','D8','Eb8','E8','F8','Gb8','G8','Ab8','A8','Bb8','B8', 'C9','Db9','D9','Eb9','E9','F9','Gb9','G9','Ab9','A9','Bb9','B9' ] Alls Well That Feeps Well In the end, after a lot of trial and error, and help from the Internet (natch), I got a Rubygem created and added to Rubygems.org! Now, when I want a simple feep sound on my computer, I can go to a command prompt, type feep, and I get a nice sine wave at 440Hz, 1/2 system volume, for 100 ms. If I want something cooler, I type feep -n A#3,B3,D#4,A#4,C#5,A#6 -d 1500 -a 0.25 -w saw for a nice jazzy chord block. You can just play around with this for fun, or you could essentially use it for any kind of audio-related need you have in your current project, be it an alarm, warning, art installation, or game sound effect. Also, feel free to fork it and improve it, as I know it’s not as good as it could be (doesn’t even have any tests yet). However, it’s totally useable even now, so go forth and feep, OK?"},{"title":"Gem Warrior: Part 1 (of Who Knows)","url":"/2015/06/08/gem-warrior-part-1-of-who-knows/","tags":["game","gaming","ruby","text","adventure","gemwarrior","gem"],"body":"A game where you’re typing words on a command line is not exactly “modern gaming”, but it has a certain charm that tugs at a (hopefully) shared computing nostalgia. Also, it’s a lot easier to program something where the output is text, rather than graphics. Thus, I’ve embarked on a game development project called Gem Warrior, a roguelite text adventure, (eventually) replete with a juicy command list, glorious monsters, and a hyperkeen randomized world that challenges you to discover its seemingly boundless majesties, and defeat an Evil Guy to Win the Day! The Genesis Since the first code I ever wrote, making a game seemed like a fun idea. I like playing them, so why not try making one? Well, games can be tougher than web pages or system scripts. They take a good deal of planning and ambition, and making one that’s actually fun and not just a novelty is even harder. Until now, I guess I just never had a good idea or the wherewithal to make one. The time to make a game has come. I’m writing this in Ruby as a RubyGem, mainly because I’ve used it a bunch lately, so the name Gem Warrior was kind of predestined. It also gives me a framework for naming of entities in the game, and makes it stand out just slightly above the countless other text adventures I’m sure exist out there. Choosing to do a text adventure was the result of both wanting to make something doable, yet non-trivial and my love for the lineage of such games. They can easily be played on any system that can render text and are speedy and don’t need beefy systems. Not having to make graphics is nice, as I’m not a visual artist, and learning how a custom system prompt is built seemed like a goal that was worthy and attainable. The Progress As of this blog post, I have a working application, but not a game. What that means is that there is an engine of sorts, a simple, non-random world that is interactable, some monsters you can fight, and the ability to enter and exit this world. There is no “win” state, but there is a “lose” state (monster beating you in combat). Essentially, you begin the game, randomized name in hand, empty inventory, zero experience, but healthy and ready for action. The system prompt lists some character attributes and your current location. You can travel to new “rooms”, look around, pick up and equip certain objects, and enter combat with monsters if they exist in a room. If you are victorious, you win rox (money) and xp (xp). That does nothing for your character in terms of status yet, but it will. Certain items that are equippable raise your attack stat, and your dexterity is pitted against other monsters’ dexterity to determine initiative in a fight. The Future Plans for the future of this game are many, but the big ones are as follows: Randomized world that is still interesting (this is a biggie) Character leveling Balancing monster stats (too many of them are too difficult to beat right now) Win state (killing big bad boss, etc.) More locations, items, weapons I’m having a lot of fun working out the basics of how a game like this works, using as much help as I can get from similar projects on the web, and my programming friends. You can structure something like this any way you can, but I’m trying to get better at my coding style and follow best practices as much as possible. In Gem Warrior: Part 2 (of Who Knows), I will talk about the way I’ve structured the game, show some actual code, and hopefully expound on how I have now made a working, super-cool method of creating randomized worlds so each game is fresh."},{"title":"Gem Warrior: Part 2 (of Some Indeterminate Number)","url":"/2015/07/16/gem-warrior-part-2-of-some-indeterminate-number/","tags":["game","gaming","ruby","text","adventure","gemwarrior","gem"],"body":"Much progress has been made on Gem Warrior since last I posted, and I’ve learned a bunch about Ruby and how to properly structure a game. I’ve also come to a fairly good stopping point where people can start to actually beta test the game and I can get much needed feedback outside of the echo chamber of my own head. The Overview Here’s a bird’s-eye view of the major changes over the last month or so, straight out of my git log: Game Logo It may not change gameplay, but every game needs a neat logo, right? End Boss This update was huge! It meant Gem Warrior had become a real game with an objective and a win state. Special Abilities Not as huge as the last one, but still a nice addition: special abilities. RPGs usually have levels you gain through experience, but they also need abilities you learn besides just stat increases. “Rocking vision” was my first stab at it. Wordnik API for Randomness There is a lot of text in this text adventure, and it’d be great if there was some variety here and there that I didn’t need to write. Enter Wordnik. It’s optional, because it takes up network bandwidth and can slow the game down a bit, but I want to expand it eventually. YAML Another major structural change to the game was moving all of the data for locations from code to data files. I saw it done in another Ruby text adventure online, and it seemed to make sense to separate the two things. Z Axis The map now has more than one level! Arena Need to beat up a bunch of monsters for money and experience? You can now. Sound Using my other RubyGem feep, I added some basic sound in the game. I’m not sure I’ll keep using it, because the threading of it into the game causes pauses, but it’s nice to have for fun. Player Name Generation I spent a fair amount of time porting a public domain JavaScript implementation of a name-generating Markov Chain algorithm to Ruby so I could use it to make random names. Stats How long did you play the game? More statistics on various aspects of your play session were added soon after. Merchant Rats in holes can sell items, right? Puzzle Adventure games have gotta have at least one puzzle, right? Main Menu Proper games have main menus, so I had to add one. Intro Letter A bit of world-building to get you going. All of this has been equal parts exciting and frustrating to figure out, but that’s programming for you. Unfortunately, I learned recently that installing the gem and running it on a system has a loading bug, so you can’t play it unless you download the source and run it directly. As soon as I can figure that out, I can open this up to others in a more official capacity. Early attempts at making portable binaries for Mac/Win/Linux, so you don’t even have to have Ruby or RubyGems installed, have proved unsuccessful, but it may have something to do with the gem installation bug. Overall, I’m pleased with how much I’ve been able to figure out. I can’t wait for others to try it out!"},{"title":"Gem Warrior: Part 3 (of 3): Gemcutting 101","url":"/2015/10/01/gem-warrior-part-3-of-3-gemcutting-101/","tags":["game","gaming","ruby","text","adventure","gemwarrior","gem","guide","markov","yaml","audio","yaml","wrapup"],"body":"(Previous posts 1 and 2) For the most part, Gem Warrior is done. What a blast it has been! I’m not sure I’ve worked so hard on a project in a long time. I made a game! How do I know I’m done? Besides the relative burnout I feel from working on it for a while, the features I most wanted to implement are in, and all the bugs that have cropped up (that I know ;P) are fixed. There is a world of Jool, a player to control, levels and abilities to attain, items to get and use (and equip if appropriate), monsters to fight, some people to talk to, and a final boss to defeat. It’s as complete a game as I’m willing to make it. Now, for the first time, I’m going to take a little walk through how the game works, both game-wise and code-wise, which will be long and detailed. However, if you are making a game in Ruby (or whatever), I think it may be enlightening. Table of Contents What is a Game? Gem Structure Game Structure Main Menu Main Prompt Debug Mode Battle Merchants Extra Fun Stuff Audio Systems Naming and Markov Chains Wordnik Word Generator Grid Cartographer Game Over! Overall Difficulties Style Consistency Testing Ruby Setup/Deployment Interest What’s Next? For the Road What is a Game? This question may be either overly philosophical or inane, depending on who you ask, but as someone who wanted to make one from the ground up, it was a question I needed to answer. A game (Game), as I defined it, is a digital realm (World) that you enter and interact via an avatar (Player) of some sort. There is an entrance point (Location.new('Home')), a journey of some sort where you travel around (Location) and interact (positively and negatively (Battle)) with the environment (Entity\\Creature\\Person\\Monster), changes to your avatar, and then an exit point (of sorts). All this is facilitated by an interface (REPL (Read Evaluate Print Loop)) that allows for certain commands to be parsed. The rest (whether it has a story or graphics or sound or multiplayer or 3D VR is functionally gravy. Hopefully well-made and tasty gravy, but gravy, nonetheless. Gem Structure A neat tree diagram of the overview of the Gem Warrior gem! ├───assets (annotated map of Jool, web graphic header) ├───bin (main Ruby gemwarrior binary) ├───data (world data in YAML, name data in YAML for markov chain name generation) ├───lib │ └───gemwarrior (game, world, repl, etc.) │ ├───entities (entity, creature, item, person, monster, etc.) │ │ ├───armor │ │ ├───creatures │ │ ├───items │ │ ├───monsters │ │ │ └───bosses │ │ ├───people │ │ └───weapons │ └───misc (auxiliary classes, e.g. audio, name_generator, wordlist, etc.) Game Structure Using the same neat tree diagramming thingamajig, now you can see the hierachy of objects as they get added to the game: ├───Game │ ├───GameAssets │ ├───GameOptions │ ├───World │ │ ├───Player │ │ | └───Inventory │ │ | └───Items │ │ └───Locations │ │ └───Location │ │ ├───Items │ │ ├───Entities (Creatures, Monsters, Persons, Items, Weapons, Armor) │ │ └───paths (north, east, south, west) │ └───Repl │ └───Evaluator │ └───commands (and aliases) The Gem Warrior gem initally creates a new Game instance. The first two things that instantiates are a GameAssets module instance (all of the entities in the game for both reference in debug and for a pool to clone from) and a GameOptions module instance (all of the various game option). More importantly, it creates a World instance, which has a Player instance associated with it, and a bunch of Location instances (each of which may have their own set of Creature, Person, Monster, Weapons, Armor, or Item instances). Some of those Location instances may also have certain boss Monster instances that I place when the game is loaded. Otherwise Monster instances are spawned somewhat randomly (although constrained by the Player level and the Location stats). Besides all that, there are several dependencies on other gems like colorize (string color), matrext (string animation), and bloops (audio). Now to walk through the game once it has loaded! Main Menu The Game instance has attributes with sane defaults, but they can be overridden by both a gw_opts file and command line switches (e.g. -n to immediately begin a new game) that further override said options. The first thing you see when the game loads is a main menu (so pro!) which allows you to, among other things, modify some of those options: /-+-+-+ +-+-+-+-+-+-+-\\ |G|E|M| |W|A|R|R|I|O|R| \\-+-+-+ +-+-+-+-+-+-+-/ GW v0.15.1 ======================= (R)esume Game (N)ew Game (A)bout (H)elp (O)ptions (L)og of Attempts (C)heck for Updates (E)xit ======================= From here, you get a few helpful paths to go down (like a pre-game game). You can resume a previous game (if one exists), start a new one, display some basic game info, change the aforementioned game options, check out past attempts, check for updates, or get out. Nothing revolutionary, but learning about the different ways to save and load game data (I opted for one big ol’ YAML dump) and even doing some light HTTP API connecting to Rubygems.org for gem status were newish to me. Main Prompt Assuming you either start a new game or resume a previous one, you’re presented with the following prompt that you’ll be using to interact with the game: [>>> HOME > Thing(s): bed, chest, letter, stone, tent >> Path(s): north, east, west [LV: 1][XP: 0][ROX:300][HP: 30/30 ] [Belyd @ Home] GW> You start in your home, with nothing on your person, and a few things to interact with in the general vicinity. There are some exit paths, too. Then you notice, below that, your heads-up display of sorts, that shows your level, experience, rox (money), hit points, and a shortcut name@location widget because you’re not always using the look command. It’s a bar of commonly-noted stats, essentially. Under all that is your trusty main prompt, which will re-display itself after each command (unless you are in battle or conversation with someone, as they have their own sub-prompts). A light in the dark, a pen on the paper, a sword in your scabbard. It is where you type all the commands that the game understands, just like any good text adventure or Interactive Fiction game or command line utility. A quick type of help will bring up the rest of the commands you should be aware of in Gem Warrior: GW> help ================================================================================ COMMAND | ALIAS | DESCRIPTION ================================================================================ character | c | Display character information look | l | Look around your current location rest | r | Take a load off and regain HP take | t | Take item talk | tk | Talk to person inventory | i | Look in your inventory use | u | Use item (in inventory or environment) drop | d | Drop item equip | eq | Equip item unequip | ue | Unequip item go | g | Go in a direction north | n | Go north (shortcut) east | e | Go east (shortcut) south | s | Go south (shortcut) west | w | Go west (shortcut) attack | a | Attack a monster (also fight) breakthru | br | Teleport to a location (if you are experienced enough) change | ch | Change attribute version | v | Display game version checkupdate | cu | Check for newer game releases help | h | This help menu (also ?) quit | q | Quit w/ confirmation (also exit/x) quit! | qq | Quit w/o confirmation (also exit!/xx) ================================================================================ I will refrain from going through every single command, as hopefully the menu explains them well enough. In addition, there are many hidden debug commands that only work if the game is in “debug mode”. This can be entered through a command line switch when loading the game. Debug Mode ================================================================================ DEBUG COMMANDS ================================================================================ god | gd | Toggle god mode (i.e. invincible) beast | bs | Toggle beast mode (i.e. super strength) constants | cn | List all GameAssets list | ls | List all instances of a specific entity type vars | vs | List all the variables in the world map | m | Show a map of the world stat | st | Change player stat global | gl | Change world global variable teleport | tp | Teleport to coordinates (5 0 0) or name ('Home') spawn | sp | Spawn random monster levelbump | lb | Bump your character up *n* levels restfight | rf | Rest, but ensure battle for testing ================================================================================ A debug mode is pretty common in games, I assume, as the developer really needs to be able to skirt the rules and change statistics at will in order to test, and getting those achievement naturally takes much too long in-game. As features got added, or I found specific bugs that needed more attention, I added more and more debug commands in order to “fast-forward” to those moments. Battle Most games have some kind of conflict-resolution between the Player and any other Entity that is sentient and both morally and violently opposed. We call this “battle”. In Gem Warrior, once battle is instigated, your prompt changes to a battle prompt, with its own commands. You don’t return to the regular prompt until you either defeat the monster, run away, or they defeat you. GW> f alexandrat ******************************************************************* BATTLE BEGINS! ******************************************************************* You decide to attack alexandrat! alexandrat cries out: \"Bitey, bitey!\" BELYD :: 10 HP ALEXANDRAT :: ??? HP What do you do? [Fight][Defend][Look][Item][Pass][Run] [BATTLE]> I wrestled with how to handle this, as different decisions lead to different kinds of games. Games have tried various approaches to this conflict, ranging from the old-school random battles all the time to battles you can avoid by careful maneuvering to battles you can sidestep through diplomacy. Since I did not want to build a complex dialogue tree, I figured that last one was out, but I also did not want to do the first thing because I spammed the fight button enough as a kid during countless random battles. Thus, what I ended up with is this: enemies, which are either placed strategically in a couple locations to block passage or spawned randomly as you move around, only fight when attacked. The only exceptions are one boss monster in a specific, dangerous area and if you rest without a tent. This allows the Player to explore safely and instigate battle only when they are ready. More text adventure than RPG, I guess. One place in the game, called the Arena, allows for an infinite flow of battle, if you want, but it costs money. Merchants There are some people in the game that you can talk to and enter conversations. Some of those people are actually merchants. Rockney's Hole in the Wall -------------------------- (1) Herb - 10 rox Green and leafy, this wild herb looks edible. (2) Dagger - 150 rox Flint that has been sharpened to a point, attached to a block of smooth granite by thin rope. Truly a work of art. Attack: +1-3 (current: 1-2) >> \"What are you in need of?\" 1 - Herb 10 2 - Dagger 150 x - leave REMAINING ROX: 300 ITEMS SELECTED: [ROCKNEY]>? When in conversation with a merchant, you get a different prompt, much like battle, with its own commands. Your current money is displayed and compared to the amount of the purchases you put into the “ITEMS SELECTED” cart. If you got enough rox upon exit, then you buy its contents. Extra Fun Stuff Embarking on a project of this scope, one is bound to veer off into side projects because of features you want to implement. Audio Systems Prior to Gem Warrior, I had played around with making sound on the command line with Ruby in various ways. One way that was most versatile was feep. With a simple command, you could make a note (or group of notes, i.e. a chord) play out of your speakers at a certain frequency, volume, and duration. It’s fun to play around with, but I found out quickly that its performance is terrible, especially in a more fast-paced game with a battle system. The main issue is that feep creates raw audio files on-the-fly, which is not very fast, and so despite it being threaded, there was still this obvious lag, and sometimes it would even crash the game. Thus, I needed something better! Something that was more low-level, and most likely written in C or something, and compiled to Ruby. And I found it right away…for Windows. The win32-sound gem does enough of what I needed to be a replacement, but it would not work on Mac or Unix. Only recently did I find another gem, with the comical name of bloopsaphone, that not only works on Mac and Unix, but also Windows, so it became the default mode for all my bleeps and, uh, bloops. Feep is still an option, but not recommended. Naming and Markov Chains The game generates a new name for you when you begin. At first I was just choosing random letters from the alphabet to create a novel, unique name. It’s lazy, but got the job done. Later, I learned about how you can use sample name data and a markov chain algorithm to generate unique noms de plume that actually share the characteristics of the names in your sample data. Big props goes out to donjon’s RPG Tools’s page, which included, among many other fascinating tools, source code for a Javascript implementation of this process, which I painstakingly translated to Ruby. In the end, all that hard work just makes the “random” names chosen a lot less random, but I think it was worth it! Wordnik Word Generator Each creature, besides having a name and description, also has three distinguishing characteristics: face, hands, and mood. I had bigger plans for how these would change depending on certain circumstances, but I only got as far as creating unique ones for each creature. In order to make them more interesting beyond the words I put in statically, Wordnik exposes a public API you can call to get random words to use in your application. If you turn on that option in the main menu (or with a command line switch), these values will be grabbed from Wordnik. The little fortune upon load, as well as some of the descriptions throughout the game will benefit from it, as well. Grid Cartographer Once Gem Warrior’s world of Jool got big enough, I decided I needed to start mapping it out somewhere besides my head. The best tool I found, that is worth every penny, is David Walters’s Grid Cartographer. Easy to use, cross-platform, and featuring just about everything I needed for my small little game, I heartily recommend it. Game Over! Besides navigating the main menu, getting acquainted with the main prompt, entering commands, interacting with things, and engaging in battle with monsters, that’s basically the game. There is a specific “end point” you can reach if you get to the right location and interact with your environment in the appropriate manner (i.e. kill the boss, return the magical thingy), but you are still returned to the game after and can then go about doing whatever you want (open world, woo!). Overall Difficulties Of course, there are always some things that come up whenever you code that prove difficult. Figuring out the logic for how to represent and manipulate an idea in a programming language is the fundamental task at hand, and it isn’t always easy or efficient. The way you come up with may work, but it may not be the best way. Style Consistency I found as the months went by I kept changing my approach as to how I’d code a specific bit of functionality. Refactoring is a normal process, and it always felt good to replace some gangly chunk of spaghetti into a leaner, smaller chunk of…penne? However, I didn’t always change the older pieces that suffered from the Before Way, so there’s often a mix of paradigms scattered throughout the project, making things look inconsistent. Testing I’ve never been good at testing my code. TDD and BDD are acronyms I’m familiar with, but I’ve never gotten beyond doing basic tutorials. I debug, but I don’t test. My methods to “test” are: print statements using a debugger These methods are all reactive, as you use them when things have already gone wrong (like you broke your code). Testing is precautionary, as it posits some kind of condition, and then you code something that satisfies it (at least in TDD). My pattern seems to be to dive right into coding the structure and features of a project, and by the time it gets sufficiently complex I’m “too far in” to start writing tests, because I’m not even sure where to begin at that point. The lesson, yet again? TEST FROM THE BEGINNING. It’s fine to outline some pseudo-code skeleton of a project, but once you’re actually coding implementation, you’d better be writing tests alongside it, otherwise the weeds take over. Without tests, I spent a significant amount of time with pry hunting down issues in my code. Implementing new features was always a little bit scary, because even with git branches as backup, you still don’t know if what you’re adding is breaking things. Ruby Setup/Deployment Getting Ruby set up to work and run your application with all its dependencies is no small task, especially for someone who is not steeped in the development world. I’ve spent plenty of time getting my own machines into a state that’s useable, but some people could not even load Gem Warrior, let alone play it because some dependency wouldn’t load and/or couldn’t be installed. Ruby is a fine language and I enjoy using it for the most part, but it’s an interpreter, so you need some finessing to get an application into the mainstream standard of “type this one word and you are playing” or “double-click this icon and you are playing”. I tried both Traveling Ruby and OCRA but neither ever got me to the one-size-fits-all state I wanted Gem Warrior to be in to easily deploy it to someone else so they could playtest it. Interest Sigh. Unfortunately, this is not a code/design issue, but a marketing one. The second thing is largely dependent on this issue, as without interest, it’s kind of moot whether anyone is having trouble getting your game to run. Thankfully, I had a couple testers who helped out a bunch, but it’s not a big enough sample size. I used MailChimp for the first time to create a newsletter people could subscribe to, and I’d like to think that made me seem a bit more professional than usual. What’s Next? Now that I’ve proven to myself that I can create a game from scratch, I’d love to make another one. The issue with a text adventure/RPG is that once the engine is done, the meat of the process is really creating content. Typing commands into a parser is not amazingly fun (probably why we created GUIs), so you want to be reading interesting things and/or doing something skillful. Gem Warrior is largely a bunch of simple actions and random dice rolls. Creating content is where your creativity and imagination and general life experience come into play. If you’ve ever written a story or made a movie or penned a composition, you know that this process is hard to pin down and even harder to make compelling. The story in Gem Warrior is pretty standard defeat-boss-and-save-world-boilerplate, although I thought that using rock-related descriptions and such at least gave it a unique identity. However, coming up with new stuff to fill the world is tough, and I think my next game project will definitely focus more on the mechanics of a game, perhaps picking a simple one that is fun to play, regardless of the content. For the Road I hope my tale of making my first real game was fun and helpful and maybe even inspirational. It was really, really enjoyable to make, and I look forward to the next challenge."},{"title":"Game Development with Pico-8","url":"/2016/11/07/game-development-with-pico-8/","tags":["game","gaming","lua","pico8","learning","github"],"body":"Spurred on by Github’s Game Off game jam, and inspired by Hook, Line, and Thinker, I’ve decided to use Pico-8 as my game engine workplace, as writing everything from scratch can be a bit of an ordeal. An all-in-one minimalist design shop, Pico-8 has the ability to do the cart, sprites, and audio all in one neat little package. It’s been over a year since I worked on a game, so my game design abilities are a bit rusty. Thus, as with all disciplines, it’s good to go back and renew the basics before actually making something worthwhile. Getting Started My first task to learn the Pico-8 system is to familiarize myself with the tool, and look through the API. This largely comes in the form of a text file accompanying the main software package (although there’s also this for a quick reference). Pico-8 uses a subset of the Lua scripting language (which is a popular scripting language in a lot of games). I remember first hearing about it when I played World of Warcraft, as it was the way people made mods. Never touched it at the time, but now I’m fully ensconced. Pico-8 comes with a lot of helpful demo carts (the software’s term for programs, as the whole thing is like a throwback console from the 80s) that go over many techniques one would need to design a game. Despite the limitations of a 128x128 screen, 16 colors, and only 4 channels of audio, the expressiveness people have created is inspiring. Current Status As of right now, all I’ve done is create two things: A sun that sits in space, with a controllable blue planet that can fly around at different speeds, booping back to its origin if it gets too close to the sun A 1-player pong clone (you against 3 walls) However, I’ve learned how to draw simple shapes, utilize sprites, make some music, handle screen boundaries, implement (very simple) object collision, and make both a title and game over screen. Not sure if either of these two concepts will go beyond their current state, but they were necessary to get my feet wet. I’m over a week in on the Game Off, so I really need to decide on a game type to do soon. Regardless, this has ignited my creative engine and I can’t wait to see what I can come up with over the next month. More blog posts to come!"},{"title":"Axeracer, my first Pico-8 game","url":"/2016/12/06/first-finished-pico-8-game-axeracer/","tags":["axeracer","game","gaming","lua","pico8","learning","github"],"body":"The Github Game Off is over, and my “finished” product is Axeracer (source). It’s a simple, one-track racing game that has you piloting a little insect car thing with axes for antennae, all the better to “hack” through the grassy track on your way to the finish line. This post is not meant to go over every detail of the game, but just to hit on some of the highlights. Axeracer was built in Pico-8, which allows for all the code, graphics, and sound to be in one nice package. Of course, there are graphical, aural, and input restrictions, by design, so it can make it both easy and difficult to work in. My month-long endeavor to understand the system may not have delivered flashy visuals or sound, but getting it to where it is today took a lot of work, regardless. Humble Beginnings To get a feel for things, I made a bunch of prototypes: arkanoid, pong, shooter, and snake. Via online tutorials and my own fiddling, I got the gist of how a Pico-8 game came together, what with sprites and collisions and movement. One particular prototype that kept me coming back to was an overheard racing game, and it reminded me of playing Super Off Road, Spy Hunter, and R.C. Pro-Am back in the day. This would be what I would flesh out. Game Basics After all this tinkering, I came to some general conclusions about what’s necessary for a finished game: Avatar to control Scene to move avatar on Scene tiles that are passable, and scene tiles that are not passable Scene origin and ending rules Code to manipulate avatar Code to keep avatar in bounds Additional scenes for title, win, and game over, and code to move between them In general, all Pico-8 projects use two main system calls to rock that game loop: 1) _update() - what should change each frame? 2) _draw() - what should be drawn each frame? Everything else in a .p8 file’s code section is just variables and helper methods to those ends. All variables are global unless they’re prefixed with local, so you generally just stick them all up front. It’s not modern OOP programming, for sure. In fact, it’s a mess of spaghetti code in a single file. However, it’s like being able to program in a virtual NES-in-a-box in 2016, so that’s cool. Intermediate Goings-On Movement The simplest game’s avatar would just be a single pixel, but it could also be a shape, like a rectangle or circle. Regardless, its basic 2d movement capabilities are basically covered by the following: if (btn(left)) then x-=1 end if (btn(right)) then x+=1 end if (btn(up)) then y-=1 end if (btn(down)) then y+=1 end In other words, if you press any of the arrow keys, your avatar’s x or y position changes (the screen is just a grid of x,y coordinates). The meat of all action games asks a two-part question once you decide to move: do you collide with anything? And, if so, what happens? Welcome to much of game development logic programming. Pico-8, like most game development tools, allows for sprites, which are just pixel templates that can be moved as a group (think Mario in his overalls and hat). It still has an x,y position, and using either keyboard or game controller directional buttons can change that. The next level of logic is acceleration, as simply “teleporting” an avatar around by changing its position by a fixed amount doesn’t look real. So, as you hold down a button, the amount that your avatar changes position (their velocity) increases (acceleration). Release the button, and the velocity slows down (deceleration). All of that is present in Axeracer, and is pretty standard implementation. The Hard Stuff Sprite Rotation Fortunately, for realism, the avatar you control isn’t just one sprite always facing the same direction. Unfortunately, rotating that sprite so it faces the direction you are moving was beyond my capacity alone, so I had to bring in help. Thanks to Pico-8 BBS user movAX13h’s brilliant Pico Wheels game that had this amazing bit of code in it: car.drw=function() local r=flr(car.rot*20)/20 local s=sin(r) local c=cos(r) local b=s*s+c*c for y=-6,5 do for x=-6,5 do local ox=( s*y+c*x)/b local oy=(-s*x+c*y)/b local col=sget(ox+4,oy+4) if col>0 then pset(car.x+x-car.z,car.y+y-car.z,col) shadow(car.x+x+1+flr(car.z),car.y+y+1+flr(car.z)) end end end Axeracer doesn’t allow for jumping (yet), so I didn’t need that shadow part, but the rest was golden. It essentially redraws the sprite as you rotate it, on-the-fly. Now I could turn my car around and around, and when it went forward, the front part of your avatar followed suit. Everything looked and acted much more realistic now. This was a huge part of making this particular prototype one I would end up expanding upon. Sprite Zooming As the project was reaching its end, I realized I wanted to add a countdown before you got control of your avatar (you know, 3..2..1..GO! kind of thing). You’d get to see these big numbers zooming in all dramatically, like I remember from other driving/racing games. Figuring out how to redraw sprites on the fly like with rotation was another roadblock, however. Yet again, the Internet saved the day: function zspr(n,w,h,dx,dy,dz) sx = 8 * (n % 16) sy = 8 * flr(n / 16) sw = 8 * w sh = 8 * h dw = sw * dz dh = sh * dz sspr(sx,sy,sw,sh,dx,dy,dw,dh) end Using this wrapper zspr() method, it was a lot easier to figure out how to achieve the effect I was going for. Essentially, I had to set up a bunch of chain reactions that created a few tables, Pico-8’s array, of sprite information, zoom into each sprite within, and then remove the array so the next frame updates wouldn’t draw them anymore. I think I pretty much nailed it. Wrapping Up Obviously, just having the one scene of a race track would be a little incomplete, so I also added a title screen scene which the game boots to, as well as lose and win conditions that just pop up a little dialog with some explanatory text. All of these details turn a prototype into a game, in my opinion. Also, I added some music and sound FX to appropriate places to jazz it all up. Another cool thing about Pico-8 is that it easily allows for screenshots and animated GIFs of your game, so documenting and marketing things are a snap. Thus, I put it up on Game Jolt for fun. For the Road I can definitely see using Pico-8 for quick prototypes of game ideas. Just being able to jump right into working code, especially now that I have templates to draw upon, really expedites the process. It’s super easy to make lo-fi sprites and sounds, which I love. However, my next major project will be in Stencyl for a game jam starting in a few days. Stencyl is a more modern GUI tool that’s more complicated and allows for higher fidelity of graphics and sound and input. I look forward to seeing what it can do."},{"title":"Utter is now Utterly","url":"/2016/12/21/utter-is-now-utterly/","tags":["utter","utterly","mac","macos","apple","objective-c","swift","github","cow"],"body":"Presenting: Utterly, a macOS app that puts a GUI on top of Apple’s built-in speech synthesis technology. Download version 1.0! My previous attempt, Utter, has been rewritten with state-of-the-art tools and the newest of operating system version. Also, I added a picture of a cow to the app itself (instead of just the icon). Backstory I once wrote a little Mac utility called Utter. I had been using this command line utility to get my Mac to speak to me (the say command, essentially, but enhanced), but wanted a GUI. There was no source I could find, so I delved into the world of NSSpeechSynthesizer and made Utter. It was fun and I learned a lot, but it had some issues and quirks I could never quite figure out. It’s written in Objective-C, but the newest hotness on Apple platforms is Swift. I actually really like Swift, and returning to my old Objective-C code felt even more arcane than it already did when I first tried using it, so I figured it was time to get serious and rewrite the thing (plus finally add a picture of a cow). Swift Rules The whole rewrite, except for a few details that finally got implemented recently, probably happened in a day. Swift just makes more sense to me after using things like Ruby and Golang, and its syntax is a lot less verbose. Maintenance should be a lot easier to do now that it’s built with today’s tools and tech. And now I have a final Swift project I can use to make more from!"},{"title":"\"Fun\" with Javascript Frameworks","url":"/2017/04/20/fun-with-javascript-frameworks/","tags":["js","javascript","angular","angularjs","meteorjs","express","node","nodejs","reactjs","framework","systemjs","webpack","requirejs","raffler","typescript"],"body":"I recently completed a new web app called Raffler that lets you take a list of items (usually names) and then “raffle” them (i.e. randomly choose one). It’s an extension of an older web app I made called Just Pick One, but except for some neat animation I added on the front-end design, the back-end logic was largely the same as always: one big honkin’ funcs.js file full of global variables and methods. Bad Mike, I know, I know, but it’s just how I function when I build from scratch. However, I know it’s “wrong” and I should adapt to modern development standards, so after a couple months of on-and-off toying with this new app, I finally modularized it in a more manageable state, but the journey was somewhat perilous as I ventured into the World of Javascript in 2017. Backstory Raffler is a fairly simple mix of HTML and CSS, made neat and cute by a glut of Javascript/jQuery, but it doesn’t mean it couldn’t be improved by using a framework. Moving stuff into separate files that are specific to their function would improve maintainability and readability. Unfortunately (spoiler alert), the time and effort it would take to move my custom spaghetti code to a proper framework would direct my eventual path toward merely augmenting my existing code. As Javascript frameworks go, until recently I had very little experience with anything beyond toying around with a to-do tutorial in BackboneJS. Thus, I had a lot of research to do. Big Solution = EGADS Everything starts with Node, which is Javascript on the server (historically, it has solely been client-side). People really like to use Javascript, despite its failings, most likely because it’s easy to play with and see results. The Main Big Frameworks built on top of Node seem to be Angular and React (I haven’t yet dared venture down this road yet). We actually started a major project at work with Angular, so I’ve been learning its intricacies. I also tried out Meteor, which is a similar variant. Both Angular and Meteor turn all of your disparate parts into components that hook together like Lego blocks. Everything is in TypeScript, which is a typed version of Javascript that lets you use newer Ecmascript stuff. It’s all a little overwhelming, and going through a few tutorials helps sort it out, but I’m not close to fluency yet. Due to this technical mountain I’d have to climb, I figured it was not going to be an efficient route for my app, and looked for something simpler. Medium Solution = Almost There Pulling back from the Big ones, we get a Medium solution in things like Express. Because Node is so barebones (on purpose, I assume), things like Express help to create some basic web app foundational things like templating, routing, and the like. Express is not too difficult to understand, so it seemed like a winner. Still, using it would require some considerable rewriting of my setup, so I decided to go even simpler. Small Solution = Just Right At the bottom of the “Modular Javascript” barrel, we have stuff like RequireJS, Webpack, and, what I ended up going with, SystemJS. RequireJS seems to be the old generation gold standard for breaking up your funcs.js into more manageable pieces, but I couldn’t get it to work. Webpack is used by some of the above mentioned bigger frameworks, so I figured it would be overkill, and didn’t even try it. SystemJS, on the other hand, well…it just worked. Essentially, I included SystemJS in my app, and then broke out parts like bootstrapping (the initial variables and methods needed to even get things going), main (most other app methods), helper (utility methods that get reused a lot), and effects (I use a few audio files and a neat firework display on a successful raffle). Old Directory Tree ... |-- js |-- funcs.js |-- jquery.js |-- jquery-ui.js ... ... New Directory Tree ... |-- js |-- app |-- bootstrap.js |-- fx.js |-- helper.js |-- main.js |-- lib |-- systemjs |-- jquery.js |-- jquery-ui.js ... ... Much nicer, yeah? I could break my app out into even more parts if I wanted, which is the appeal to using something like SystemJS, so I dig it and will most likely use it in a future project. To the end user, nothing changed, but for me, it’s a big difference. Maybe someday I’ll actually make something with one of the more complicated solutions, too, but you gotta start somewhere! Speaking of which, if you’re like me and still often living in the dark ages of Javascript development, I’d urge you to just pick a solution (there are many, many others I did not mention) and focus on it. Everything works very similarly, so don’t get tripped up on all the choices. It’s an iterative world and frameworks are getting built and modified all the time, so just start with something, anything, and learn the basic functions. You’ll be glad you did (actually, no guarantees)."},{"title":"Raffler FTW","url":"/2017/08/14/raffler-ftw/","tags":["js","javascript","standard","node","nodejs","framework","systemjs","raffler","uccsc","ucsd","gulp","task-runners"],"body":"Since my last post, I’ve worked on Raffler quite a bit (it got its own domain, for one), making it warmer, juicier, and with a nice glaze around the edges. In sum, it’s approximately 476% better. It’s now ready to unveil publicly, after a beta test at UCCSC, a rad tech conference recently held at UC San Diego, so let’s dig into it and discuss some things that changed since last we raffled items in a random fashion. Overall Architecture Raffler is largely built with HTML, CSS, and JQuery, meaning it does not use a framework or architecture of any sort beyond building a Raffler object with properties and methods. However, to avoid one long app.js spaghetti code mess, I employed SystemJS to properly load all of my JS files. Raffler uses three kinds of data storage: JSON, in-memory Array, and Local Storage: Raffle items are initialized using a flat JSON file Those items are then put into a Javascript array, i.e. itemsArr When items are chosen, they get removed from itemsArr and sent to Local Storage, which allows Raffler to remember what was chosen, even if the browser is refreshed or closed Optional: this in-memory itemsArr also possibly gets synced with another data source: user items. If any have been created, they are added to itemsArr Javascript Standard Style One really new thing I started doing this time was to write my Javascript code to some kind of standard…namely Standard Style. I stumbled upon this while installing some Atom linter module, and it lead me to a blog post called Never Use Semicolons (and one of its detractors). Initially aghast, I’ve come around to this idea, at least for now. This is remarkable, since I’m coming from a PHP/C# background, where ending coding statements with a semicolon is practically unconscious. However, I’ve also done plenty of Ruby where semicolons are not needed, so I was open to this new way of thinking. Hey, if NPM does it, I figure it’s good enough for me. Modularity Raffler was born for a specific purpose: to pick random winners of a raffle at a tech conference. However, ever since I started putting most, if not all, of my code onto Github I’ve tried to make sure my projects are as modular as possible. This means making the core project as generic as possible so as to work for the largest number of applications. Anything that customizes it, such as a specific logo or set of data, should be optional and not loaded by default, requiring a user to supply it. Raffler does this by showing no logo beyond its own, and using characters from the movie Willow as its test raffle items. You have to turn on a flag in the code to load an optional /assets/json/raffler_user_options.json file that changes the initial data, and adds a custom logo (and link to somewhere). Gulp Once I started playing around with Angular for another project, I started becoming more familiar with task-runners, little apps that automate all the boring, yet often necessary, parts of running a modern web application. Gulp is one of the more popular flavors-of-the-now, so it seemed worth it to experiment. Raffler’s application JS isn’t very big (~48k), but if anything can be done to make it more compact and take up less space, it’s worth it. So, I wrote a gulp.js file that both lints (checks code for errors and stylistic infractions) and minifies (concatenates all files into one massive one and then changes variable names to as few characters as possible, as well as removes any unnecessary spacing and comments) my Javascript. It can even set up a process to watch for changes and redo its stuff so it’s always running the latest version. For the Road Once a web application gets sufficiently large, you might start wishing you had made it using a framework. My web app ideas always seem to start small, and often stay there, so it’s not a big deal. Other times, they balloon rapidly, like Raffler, as I get ideas or suggestions, and I start adding on things to make the whole process easier that probably should’ve been there from the start. For that reason alone, I think I may start using something like Angular or React more seriously. However, my current webhost doesn’t support such things because they require their own server architecture (i.e. NodeJS) to run, and since it’s a shared host, that is not allowed. I could use Heroku, but it has its own limitations. I could also use a non-shared hosting platform, but that would require moving a bunch of existing stuff. Thus, I’ll most likely keep doing what I’ve been doing, since it works, and only change once I’m forced to by some other directive. Weeee!"}]}
